{"version":3,"sources":["template/Loading.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","group/GroupTitle.tsx","template/AppGrid.tsx","author/Author.ts","article/Content.ts","article/Article.ts","group/Group.ts","server/Server.ts","template/ListEntry.tsx","template/List.tsx","localStorage/localStorage.ts","group/GroupDetail.tsx","template/Constants.ts","startPage/StartPage.tsx","startPage/Root.tsx","post/Post.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","icon","spin","React","Component","ArticleDetail","state","isContentLoading","contents","this","loadContent","prevProps","props","article","showContent","setState","level","text","nestContent","onClickHeader","onClick","id","subject","date","format","author","name","href","email","to","map","content","index","key","citationLevel","defaultProps","CollapsibleThreadListEntry","articles","followUps","CollapsibleThreadList","forceShowIds","articleId","includes","splice","indexOf","push","handleArticleClick","ThreadDetail","Helmet","SidebarContent","sidebar","GroupTitle","group","url","AppGrid","header","body","footer","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","Article","newsieClient","references","directReference","length","split","bodyToContents","stripStartEndCitationsFromContents","post","concat","whitespaceRegex","nextRootIndex","citationIndex","i","isOnlyWhitespace","forEach","line","substring","Group","description","number","over","low","high","overview","articlesByNumber","a","moment","headers","DATE","authorFromString","FROM","SUBJECT","setReferences","REFERENCES","articleIdMap","threads","sort","b","unix","initialResponse","code","errorMsg","console","error","Error","From","toString","Newsgroups","Subject","References","join","send","WsConnection","host","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","connect","async","Promise","resolve","addEventListener","write","_addSocketHandlers","disconnect","close","h","reject","str","addCallback","callback","onmessage","event","responseHandler","response","data","shift","onerror","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","JSON","parse","then","Newsie","Server","initWsNewsieClient","capabilities","LIST","listNewsgroups","newsgroups","ng","server","connectAndVerifyNewsieClient","newsieOptions","isNaN","ListEntry","entry","onPress","bold","title","subtitle","List","getReadArticles","readArticles","localStorage","getItem","GroupDetail","loading","instance","getGroupByName","match","params","articleListData","setItem","stringify","addReadArticle","size","query","screenIsSmall","path","render","thread","StartPage","useState","groups","filteredGroups","setLoading","useEffect","fetchData","type","placeholder","onChange","e","filter","toLowerCase","target","value","Root","Post","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","library","add","faSpinner","faHome","ReactDOM","basename","document","getElementById","URL","origin","fetch","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18fded04.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading\">\n        <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n      </div>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\nimport {Link} from \"react-router-dom\";\n\ninterface Props {\n  article: ArticleInterface,\n  showContent: boolean,\n  onClickHeader: ((id: ArticleId) => void) | null\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null\n};\n\ninterface State {\n  contents: Content[],\n  isContentLoading: boolean\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  render() {\n    const {article, showContent, onClickHeader} = this.props;\n    const {contents, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          <h1 className=\"article-detail-title\">{article.subject}</h1>\n          <p className=\"article-detail-author\">\n            {article.date.format(\"DD.MM.YYYY\")} by {article.author.name}\n            &nbsp;(<a href={`mailto:${article.author.email}`}>{article.author.email}</a>)\n            &nbsp;<Link to=\"/post/\">Followup</Link>\n          </p>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick} = this.props;\n\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} showContent={showContent} onClickHeader={id => onClick(id)}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps}/>\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)}/>\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceShowIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceShowIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceShowIds} = this.state;\n    if (forceShowIds.includes(articleId)) {\n      forceShowIds.splice(forceShowIds.indexOf(articleId), 1)\n    } else {\n      forceShowIds.push(articleId);\n    }\n    this.setState({forceShowIds: forceShowIds});\n  }\n\n  render() {\n    const {articles} = this.props;\n    const {forceShowIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry key={article.id} article={article}\n                                        showContent={forceShowIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article, ArticleId} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  id: ArticleId;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail article={article} showContent={true}/>\n        <CollapsibleThreadList articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content\">{this.props.content}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {Link} from \"react-router-dom\";\n\ninterface Props {\n  group: Group;\n  url: string;\n}\n\nexport class GroupTitle extends React.Component<Props, any> {\n\n  render() {\n    const {group, url} = this.props;\n    return (\n      <div className=\"group-title\">\n        <Link className=\"no-link\" to={`${url}`}>{group.name}</Link>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  header: ReactNode,\n  body: ReactNode,\n  footer: ReactNode\n}\n\ninterface State {\n}\n\nexport class AppGrid extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"app-grid\">\n        <div className=\"app-grid-header\">{this.props.header}</div>\n        <div className=\"app-grid-body\">{this.props.body}</div>\n        <div className=\"app-grid-footer\">{this.props.footer}</div>\n      </div>\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n\n  public toString(): string {\n    return `${this.name} <${this.email}>`;\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\nimport {Group} from \"../group/Group\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[]\n\n  contents(): Promise<Content[]>,\n}\n\nexport class Article implements ArticleInterface {\n  public readonly id: ArticleId;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private group: Group;\n  private readonly newsieClient: Newsie;\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n\n  constructor(id: string, subject: string, date: Moment, author: Author, group: Group, newsieClient: Newsie) {\n    this.id = id;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.group = group;\n    this.newsieClient = newsieClient;\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if(contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if(firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while(nextRootIndex < contents.length && contents[nextRootIndex].citationLevel !== 0) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number|null = null;\n    for(let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if(content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if(content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if(citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static bodyToContents(body: string[]): Content[] {\n    const contents: Content[] = [];\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return contents;\n  }\n\n  public async contents(): Promise<Content[]> {\n    const article = await this.newsieClient.body(this.id);\n    if (!article.article.body) {\n      return [];\n    }\n    const contents = Article.bodyToContents(article.article.body);\n    Article.stripStartEndCitationsFromContents(contents);\n    return contents;\n  }\n\n  public async postFollowup(author: Author, subject: string, body: string[]): Promise<void> {\n    await this.group.post(author, subject, body, this.references.concat(this.id));\n  }\n}\n","import Newsie from 'newsie';\nimport moment from \"moment\";\nimport {Article as NewsieArticle} from \"newsie\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const articlesByNumber: Article[] = overview.articles\n      .map((a: any) => {\n        const date = moment(a.headers.DATE);\n        const author = Author.authorFromString(a.headers.FROM);\n        const article = new Article(a.headers['MESSAGE-ID'], a.headers.SUBJECT, date, author, this, this.newsieClient);\n        article.setReferences(a.headers.REFERENCES);\n        return article;\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n\n  public async post(author: Author, subject: string, body: string[], references?: string[]): Promise<void> {\n    const initialResponse = await this.newsieClient.post();\n    if (initialResponse.code !== 340) {\n      // todo: display error..\n      const errorMsg = \"Cannot post: Posting not permitted\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    const article: NewsieArticle = {\n      headers: {\n        From: author.toString(),\n        Newsgroups: this.name,\n        Subject: subject,\n      },\n      body: body\n    };\n    if (references && article.headers) {\n      article.headers.References = references.join(' ');\n    }\n\n    const postResponse = await initialResponse.send(article);\n    if (postResponse.code !== 240) {\n      // todo: display error..\n      const errorMsg = \"Posting failed: Posting failed\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions)\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private readonly newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = Server.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      this.server = new Server('news.tugraz.at', 119);\n      await this.server.connectAndVerifyNewsieClient();\n    }\n    return this.server;\n  }\n\n  private static initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    return new WsNewsie(newsieOptions);\n  }\n\n  public async connectAndVerifyNewsieClient() {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const newsgroups = await this.newsieClient.listNewsgroups('tu-graz*');\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.newsieClient);\n    });\n  }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport function ListEntry<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n\n  return (\n    <div onClick={() => entry.onPress ? entry.onPress() : undefined}>\n      <p className={\"list-entry\"}>\n        <Link className=\"no-link\" to={entry.url}>\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </Link>\n      </p>\n    </div>\n\n  )\n}","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\n\nexport function List<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {GroupTitle} from \"./GroupTitle\";\nimport {AppGrid} from \"../template/AppGrid\";\nimport {Server} from \"../server/Server\";\nimport {Link, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  threads: Article[];\n  readArticles: string[];\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    threads: [],\n    readArticles: []\n  };\n\n  async componentDidMount(): Promise<void> {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n    this.setState({loading: false, group, threads, readArticles});\n  }\n\n  render() {\n    const {match} = this.props;\n    const {loading, group, threads} = this.state;\n\n    if (loading) {\n      return (<Loading/>);\n    }\n\n    if (group === null) {\n      return \"Group not found!\";\n    }\n\n    const articleListData = threads.map(article => ({\n      title: article.subject,\n      subtitle: `${article.author.name} - ${article.date.format('DD.MM.YY')}`,\n      url: `${match.url}/${article.id}`,\n      bold: !this.state.readArticles.find(a => a === article.id),\n      onPress: () => {\n        addReadArticle(group.name, article.id);\n        this.setState({...this.state, readArticles: this.state.readArticles.concat(article.id)})\n      }\n    }));\n\n    return (\n      <div className=\"group-detail\">\n        <Helmet>\n          <title>newsR - {group?.name}</title>\n        </Helmet>\n        <AppGrid\n          header={\n            <div className=\"float-div\">\n              <div className=\"float\">\n                <Link className=\"no-link\" to={'/'}>\n                  <FontAwesomeIcon icon=\"home\" size=\"xs\"/>\n                </Link>\n              </div>\n\n              <GroupTitle group={group} url={match.url}/>\n            </div>\n          }\n          body={<Media query={SMALL_SCREEN_QUERY}>\n            {\n              screenIsSmall => screenIsSmall\n                ?\n                <Switch>\n                  <Route path={`${match.path}/:id`} render={props =>\n                    <ThreadDetail {...props} group={group}\n                                  article={threads.find(thread => thread.id === props.match.params.id) || null}/>\n                  }/>\n                  <Route path={`${match.path}`}>\n                    <List data={articleListData}/>\n                  </Route>\n                </Switch>\n                :\n                <SidebarContent\n                  sidebar={<List data={articleListData}/>}\n                  content={\n                    <Switch>\n                      <Route path={`${match.path}/:id`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.id === props.match.params.id) || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <h3>Please select a thread or <Link to=\"/post/\">Write</Link></h3>\n                      </Route>\n                    </Switch>\n                  }/>\n            }\n          </Media>\n          }\n          footer={<div></div>}/>\n      </div>\n    )\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 45rem)\";\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport { Helmet } from \"react-helmet\"\n\ninterface StartPageState {\n  groups: Group[]\n  filteredGroups: Group[]\n}\n\nexport function StartPage() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filteredGroups: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      setState({groups, filteredGroups: groups})\n\n      setLoading(false)\n    }\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <Loading/>;\n  }\n\n  const filter = (text: string) => {\n    const filteredGroups = state.groups.filter(\n      (group) => group.name.toLowerCase().includes(text)\n    )\n    setState({...state, filteredGroups})\n  }\n\n  return (\n    <div>\n      <Helmet>\n        <title>newsR - news.tugraz.at</title>\n      </Helmet>\n      <div className=\"header\">\n        <h1>Welcome to news.tugraz.at</h1>\n        <input className=\"search\" type=\"text\" placeholder=\"Search...\" onChange={(e) => filter(e.target.value.toLowerCase())}/>\n      </div>\n      <List data={state.filteredGroups.map((group) => ({\n        title: group.name,\n        subtitle: group.description,\n        url: `/groups/${group.name}`\n      }))}/>\n    </div>\n  )\n}\n\n\n\n\n","import React from \"react\";\nimport {StartPage} from \"./StartPage\";\n\nexport class Root extends React.Component<{}, {}> {\n  render() {\n    return <StartPage/>\n  }\n}","import React from \"react\";\nimport {Server} from \"../server/Server\";\nimport {Author} from \"../author/Author\";\n\nexport class Post extends React.Component<{}, {}> {\n  async send() {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(\"tu-graz.test\");\n    const author = new Author(\"Name\", \"name@provider.tld\");\n    group?.post(author, \"newsR\", [\"test1\"]);\n\n\n    // or\n    //article.postFollowup(author, subject, body);\n  }\n\n  render() {\n    return (\n      <button onClick={() => this.send()}>\n        Send test Post (for real!)\n      </button>\n    );\n  }\n}\n","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Root} from \"./startPage/Root\";\nimport {Post} from \"./post/Post\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/post/\" component={Post}/>\n          <Route path=\"/\" component={Root}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {faHome, faSpinner} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSpinner);\nlibrary.add(faHome);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}