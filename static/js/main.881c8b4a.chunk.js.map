{"version":3,"sources":["template/Loading.tsx","article/ArticleAuthor.tsx","template/Constants.ts","template/IconButton.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","author/Author.ts","article/Content.ts","group/GroupCache.ts","article/Article.ts","group/Group.ts","server/Server.ts","template/ListEntry.tsx","template/List.tsx","localStorage/localStorage.ts","template/Header.tsx","template/Footer.tsx","group/GroupDetail.tsx","post/Post.tsx","startPage/StartPage.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Loading","className","icon","spin","React","Component","ArticleAuthor","article","this","props","date","format","author","name","queries","small","large","matches","href","email","IconButton","children","query","screenIsSmall","ArticleDetail","state","isContentLoading","contents","attachments","loadContent","prevProps","showContent","setState","text","level","nestContent","onClickHeader","hasSimpleHeader","groupName","onClick","id","subject","e","stopPropagation","to","number","map","content","index","key","citationLevel","length","attachment","dataUrl","download","includes","contentType","src","alt","defaultProps","CollapsibleThreadListEntry","baseUrl","articles","followUps","CollapsibleThreadList","forceHideIds","articleId","splice","indexOf","push","handleArticleClick","ThreadDetail","match","params","Helmet","SidebarContent","sidebar","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","GroupCache","db","cache","Promise","resolve","reject","openRequest","indexedDB","open","onerror","onsuccess","event","result","onupgradeneeded","upgrade","target","overStore","createObjectStore","keyPath","createIndex","unique","bodyStore","server","group","overArticle","transaction","objectStore","storageObj","headers","articleNumber","JSON","stringify","metadata","add","overviewArticles","forEach","persistOverArticle","overArticles","openCursor","IDBKeyRange","only","cursor","value","parse","continue","messageId","body","Article","newsieClient","references","directReference","split","instance","groupCache","retrieveBody","host","persistBody","bodyToContents","stripStartEndCitationsFromContents","post","concat","a","moment","DATE","authorFromString","mimeWordsDecode","FROM","SUBJECT","setReferences","REFERENCES","nextRootIndex","citationIndex","i","isOnlyWhitespace","whitespaceRegex","missingMimeHeader","substring","mimeInfo","join","childNodes","filter","node","TextDecoder","decode","base64","raw","lastIndexOf","replace","line","Group","description","over","overview","persistOverArticles","ArticleFromNewsieArticle","low","high","retrieveOverArticles","articlesByNumber","sort","b","articleIdMap","threads","unix","initialResponse","code","errorMsg","console","error","Error","From","toString","Newsgroups","Subject","References","send","WsConnection","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","connect","async","addEventListener","write","_addSocketHandlers","disconnect","close","h","str","addCallback","callback","onmessage","responseHandler","response","data","shift","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","then","Newsie","Server","initWsNewsieClient","connection","capabilities","LIST","listNewsgroups","newsgroups","ng","nntpPortStr","nntpUrl","parseInt","connectAndVerifyNewsieClient","webSocket","keepaliveIntervalReference","setInterval","keepaliveIntervalMs","newsieOptions","isNaN","ListEntry","entry","onPress","url","bold","title","subtitle","List","getSubscribedGroups","subscribedGroups","localStorage","getItem","getReadArticles","readArticles","Header","searchBar","Logo","Heading","type","placeholder","onChange","toLowerCase","buttons","button","Button","logo","Footer","GroupDetail","loading","filteredThreads","getGroupByName","articleListData","setItem","addReadArticle","path","render","thread","NoThread","_Post","sending","done","startsWith","replyStr","preventDefault","authorClass","log","postFollowup","headerText","onSubmit","currentTarget","readOnly","tabIndex","disabled","history","goBack","Post","withRouter","StartPage","useState","groups","filterText","subscribedGroupsName","setLoading","useEffect","fetchData","changeSubscriptionState","isGroupSubscribed","g","unsubscribeGroup","subscribeGroup","groupIcon","manageButton","subscriptionButton","allGroupsButton","groupButtons","subscriptionButtons","manageButtons","getGroups","isSubscription","isGroupFiltered","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","library","faChevronDown","faChevronRight","faHandPointRight","faHome","faReply","faSpinner","faPencilAlt","faCog","faMinusSquare","faPlusSquare","faList","faGithub","ReactDOM","basename","document","getElementById","URL","origin","fetch","get","status","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"+NAUaA,EAAb,iLAGI,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAiBC,KAAK,UAAUC,MAAI,IADtC,4BALR,GAA6BC,IAAMC,W,QCEtBC,EAAb,iLACY,IACDC,EAAWC,KAAKC,MAAhBF,QACP,OACE,yBAAKN,UAAU,yBACZM,EAAQG,KAAKC,OAAO,oBADvB,OACgDJ,EAAQK,OAAOC,KAC7D,kBAAC,IAAD,CAAOC,QAAS,CAACC,MClBS,qBDkBkBC,MCjBlB,0BDkBvB,SAAAC,GAAO,OACN,kBAAC,WAAD,KACGA,EAAQF,OAAS,6BACjBE,EAAQD,OAAS,kBAAC,WAAD,iBAIxB,uBAAGE,KAAI,iBAAYX,EAAQK,OAAOO,QAAUZ,EAAQK,OAAOO,YAdnE,GAAmCf,IAAMC,WEC5Be,EAAb,iLAEY,IAAD,EACkBZ,KAAKC,MAAvBP,EADA,EACAA,KAAMmB,EADN,EACMA,SACb,OACE,kBAAC,IAAD,CAAOC,MDlBqB,uBCoBxB,SAAAC,GAAa,OAAIA,EACf,yBAAMtB,UAAU,eACd,kBAAC,IAAD,CAAiBC,KAAMA,KAEzB,yBAAMD,UAAU,eACd,kBAAC,IAAD,CAAiBC,KAAMA,IADzB,WAC6CmB,UAZzD,GAAgCjB,IAAMC,W,OCiBzBmB,EAAb,2MAEEC,MAAyB,CACvBC,kBAAkB,EAClBC,SAAU,GACVC,YAAa,IALjB,qJASIpB,KAAKqB,cATT,0FAY2BC,GAZ3B,kEAaQtB,KAAKC,MAAMF,UAAYuB,EAAUvB,SAAWC,KAAKC,MAAMsB,cAAgBD,EAAUC,aACnFvB,KAAKqB,cAdX,gKAmBSrB,KAAKC,MAAMsB,YAnBpB,wDAsBIvB,KAAKwB,SAAS,CAACN,kBAAkB,EAAMC,SAAU,GAAIC,YAAa,KAtBtE,mBAuB2BpB,KAAKC,MAAMF,QAAQoB,YAvB9C,OAuBUA,EAvBV,OAwBInB,KAAKwB,SAAS,CAACN,kBAAkB,EAAOC,SAAUA,EAASM,KAAML,YAAaD,EAASC,cAxB3F,mFA2BsBM,EAAeD,GACjC,OAAc,IAAVC,EACKD,EAEF,yBAAKhC,UAAU,kBAAkBO,KAAK2B,YAAYD,EAAQ,EAAGD,MA/BxE,+BAkCY,IAAD,SACmEzB,KAAKC,MAAxEF,EADA,EACAA,QAASwB,EADT,EACSA,YAAaK,EADtB,EACsBA,cAAeC,EADrC,EACqCA,gBAAiBC,EADtD,EACsDA,UADtD,EAE2C9B,KAAKiB,MAAhDE,EAFA,EAEAA,SAAUC,EAFV,EAEUA,YAAaF,EAFvB,EAEuBA,iBAC9B,OACE,yBAAKzB,UAAU,kBACb,yBAAKA,UAAU,SAASsC,QAAS,kBAAMH,GAAiBA,EAAc7B,EAAQiC,MAC3EH,GAAmB,yBAAKpC,UAAU,0BAE/B8B,EAAc,kBAAC,IAAD,CAAiB7B,KAAK,iBAAmB,kBAAC,IAAD,CAAiBA,KAAK,mBAGhFmC,EACG,kBAAC,EAAD,CAAe9B,QAASA,IAExB,6BACA,wBAAIN,UAAU,wBAAwBM,EAAQkC,SAC9C,kBAAC,EAAD,CAAelC,QAASA,KAG5B,yBAAKN,UAAU,mBACb,yBAAKA,UAAU,kBACb,uBAAGiB,KAAI,iBAAYX,EAAQK,OAAOO,OAASlB,UAAU,UAAUsC,QAAS,SAAAG,GAAC,OAAIA,EAAEC,oBAC7E,kBAAC,EAAD,CAAYzC,KAAK,SAAjB,WAGJ,yBAAKD,UAAU,kBACb,kBAAC,IAAD,CAAM2C,GAAE,gBAAWN,EAAX,YAAwB/B,EAAQsC,QAAU5C,UAAU,WAC1D,kBAAC,EAAD,CAAYC,KAAK,oBAAjB,iBAKPwB,GAAoB,kBAAC,EAAD,MACpBK,GAAe,yBAAK9B,UAAU,0BAC5B0B,EAASmB,KAAI,SAACC,EAASC,GAAV,OACZ,yBAAKC,IAAKD,GACP,EAAKb,YAAYY,EAAQG,cAAeH,EAAQd,KAAO,UAE3DL,EAAYuB,OAAS,GACtB,6BACE,2CACA,wBAAIlD,UAAU,eACX2B,EAAYkB,KAAI,SAACM,GAAD,OACf,wBAAIH,IAAKG,EAAWvC,MAClB,uBACEK,KAAMkC,EAAWC,QACjBC,SAAUF,EAAWvC,MAEpB,CAAC,YAAa,YAAa,aAAc,iBAAiB0C,SAASH,EAAWI,aAC7E,yBAAKC,IAAKL,EAAWC,QAAUK,IAAKN,EAAWvC,OAE/C,8BAAOuC,EAAWvC,mBArFxC,GAAmCT,IAAMC,WAA5BmB,EACJmC,kB,EAkGTnC,EAAcmC,aA9GuB,CACnCvB,cAAe,KACfC,iBAAiB,GCJZ,IAAMuB,EAAb,iLACY,IAAD,EACqDpD,KAAKC,MAA1DsB,EADA,EACAA,YAAaxB,EADb,EACaA,QAASgC,EADtB,EACsBA,QAASsB,EAD/B,EAC+BA,QAASvB,EADxC,EACwCA,UAC/C,OACE,wBAAIW,IAAK1C,EAAQiC,IACf,kBAAC,EAAD,CAAejC,QAASA,EAASsD,QAASA,EAASvB,UAAWA,EAAWP,YAAaA,EAAaK,cAAe,SAAAI,GAAE,OAAID,EAAQC,IACjHH,iBAAiB,IAC/BN,GAAe,6BACd,kBAAC,EAAD,CAAuB+B,SAAUvD,EAAQwD,UAAWF,QAASA,EAASvB,UAAWA,IACjF,yBAAKrC,UAAU,mBAAmBsC,QAAS,kBAAMA,EAAQhC,EAAQiC,aAT3E,GAAgDpC,IAAMC,WCFzC2D,EAAb,2MACEvC,MAAyB,CACvBwC,aAAc,IAFlB,kFAKqBC,GAAuB,IACjCD,EAAgBzD,KAAKiB,MAArBwC,aACHA,EAAaV,SAASW,GACxBD,EAAaE,OAAOF,EAAaG,QAAQF,GAAY,GAErDD,EAAaI,KAAKH,GAEpB1D,KAAKwB,SAAS,CAACiC,aAAcA,MAZjC,+BAeY,IAAD,SACgCzD,KAAKC,MAArCqD,EADA,EACAA,SAAUD,EADV,EACUA,QAASvB,EADnB,EACmBA,UACnB2B,EAAgBzD,KAAKiB,MAArBwC,aAEP,OACE,yBAAKhE,UAAU,2BACb,4BACG6D,EAAShB,KAAI,SAAAvC,GAAO,OACnB,kBAAC,EAAD,CAA4BsD,QAASA,EAASvB,UAAWA,EAAWW,IAAK1C,EAAQiC,GAAIjC,QAASA,EAClEwB,aAAckC,EAAaV,SAAShD,EAAQiC,IAC5CD,QAAS,SAAAC,GAAE,OAAI,EAAK8B,mBAAmB9B,eAzB/E,GAA2CpC,IAAMC,WCQpCkE,EAAb,iLACY,IAAD,EACkB/D,KAAKC,MAAvBF,EADA,EACAA,QAASiE,EADT,EACSA,MACVX,EAAO,kBAAcW,EAAMC,OAAO5D,KAA3B,KAEb,OAAgB,OAAZN,EACK,qBAIP,yBAAKN,UAAU,iBACb,kBAACyE,EAAA,OAAD,KACE,iDAAgBnE,QAAhB,IAAgBA,OAAhB,EAAgBA,EAASkC,UAE3B,kBAAC,EAAD,CAAeoB,QAASA,EAASvB,UAAWkC,EAAMC,OAAO5D,KAAMN,QAASA,EAASwB,aAAa,IAC9F,kBAAC,EAAD,CAAuB8B,QAASA,EAASvB,UAAWkC,EAAMC,OAAO5D,KAAMiD,SAAQ,OAAEvD,QAAF,IAAEA,OAAF,EAAEA,EAASwD,iBAflG,GAAkC3D,IAAMC,WCb3BsE,EAAb,iLAGI,OACE,yBAAK1E,UAAU,mBACb,yBAAKA,UAAU,2BAA2BO,KAAKC,MAAMmE,SACrD,yBAAK3E,UAAU,2BAA2BO,KAAKC,MAAMsC,cAN7D,GAAoC3C,IAAMC,W,2DCL7BwE,EAAb,WAIE,WAAYhE,EAAcM,GAAgB,yBAH1BN,UAGyB,OAFzBM,WAEyB,EACvCX,KAAKK,KAAOA,EACZL,KAAKW,MAAQA,EANjB,uDAyBI,MAAM,GAAN,OAAUX,KAAKK,KAAf,aAAwBL,KAAKW,MAA7B,QAzBJ,wCASiC2D,GAC7B,IAEIjE,EACAM,EAFE4D,EADkB,IAAIC,OAAO,iBACKC,KAAKH,GAU7C,OAPwB,OAApBC,GACFlE,EAAOiE,EACP3D,EAAQ,6BAERN,EAAOkE,EAAgB,GACvB5D,EAAQ4D,EAAgB,IAEnB,IAAIF,EAAOhE,EAAMM,OArB5B,KCLa+D,EAAb,WAOE,WAAYjD,EAAciB,GAAwB,yBANlCA,mBAMiC,OALjCjB,UAKiC,EAC/CzB,KAAK0C,cAAgBA,EACrB1C,KAAKyB,KAAOA,EAThB,8DAaI,OAA8B,IAAvBzB,KAAK0C,eAAuBgC,EAAQC,gBAAgB3E,KAAKyB,SAbpE,uCAgBiCA,GAC7B,YAA0EmD,IAAnE5E,KAAK6E,cAAcC,MAAK,SAACC,GAAD,OAAoBA,EAAOC,KAAKvD,UAjBnE,KAAaiD,EAGaG,cAA0B,CAChD,IAAIL,OAAO,mBAAoB,KAC/B,IAAIA,OAAO,iBAAkB,MCH1B,IAAMS,EAAb,WA0CE,WAAYC,GAAU,yBAtCdA,QAsCa,EACnBlF,KAAKkF,GAAKA,EA3Cd,6IAOQlF,KAAKmF,MAPb,yCAQaF,EAAWE,OARxB,gCAUW,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAcC,UAAUC,KAAK,SAEnCF,EAAYG,QAAU,WACpBJ,KAEFC,EAAYI,UAAY,SAACC,GACvB,EAAKT,MAAQ,IAAIF,EAAWM,EAAYM,QACxCR,EAAQ,EAAKF,QAEfI,EAAYO,gBAAkBb,EAAWc,YApB/C,+EAyByBH,GACrB,IAAMV,EAAKU,EAAMI,OAAOH,OAEpBI,EAAYf,EAAGgB,kBAAkB,OAAQ,CAAEC,QAAS,OACxDF,EAAUG,YAAY,eAAgB,CAAC,SAAU,SAAU,CAACC,QAAO,IACnEJ,EAAUG,YAAY,SAAU,SAAU,CAAEC,QAAQ,IACpDJ,EAAUG,YAAY,QAAS,QAAS,CAAEC,QAAQ,IAClDJ,EAAUG,YAAY,gBAAiB,gBAAiB,CAAEC,QAAQ,IAClEJ,EAAUG,YAAY,UAAW,UAAW,CAAEC,QAAQ,IACtDJ,EAAUG,YAAY,WAAY,WAAY,CAAEC,QAAQ,IAExD,IAAIC,EAAYpB,EAAGgB,kBAAkB,OAAQ,CAAEC,QAAS,OACxDG,EAAUF,YAAY,YAAa,CAAC,SAAU,MAAO,CAACC,QAAO,IAC7DC,EAAUF,YAAY,SAAU,SAAU,CAAEC,QAAQ,IACpDC,EAAUF,YAAY,OAAQ,gBAAiB,CAAEC,QAAQ,QAvC7D,wDAgDkCE,EAAgBC,EAAeC,GAhDjE,4EAiDQC,EAAc1G,KAAKkF,GAAGwB,YAAY,CAAC,QAAS,aAC5CC,EAAcD,EAAYC,YAAY,QACpCC,EAAa,CACjB5E,GAAIyE,EAAYI,QAAQ,cACxB,eAAgB,CAACN,EAAQC,GACzBD,OAAQA,EACRC,MAAOA,EACPM,cAAeL,EAAYK,cAC3BD,QAASE,KAAKC,UAAUP,EAAYI,SACpCI,SAAUF,KAAKC,UAAUP,EAAYQ,WAEvCN,EAAYO,IAAIN,GA5DpB,2FAgEmCL,EAAgBC,EAAeW,GAhElE,6EAiEIA,EAAiBC,SAAQ,SAACX,GAAD,OAAsB,EAAKY,mBAAmBd,EAAQC,EAAOC,MAjE1F,kFAoEoCF,EAAgBC,GApEpD,sGAqEW,IAAIpB,SAAS,SAAAC,GAClB,IAEI7C,EAFc,EAAK0C,GAAGwB,YAAY,QACRC,YAAY,QAClBnE,MAAM,gBACxB8E,EAAsB,GAE5B9E,EAAM+E,WAAWC,YAAYC,KAAK,CAAClB,EAAQC,KAASb,UAAY,SAACC,GAC/D,IAAI8B,EAAS9B,EAAMI,OAAOH,OAC1B,GAAG6B,EAAQ,CACT,IAAMjB,EAAc,CAClBK,cAAeY,EAAOC,MAAMb,cAC5BD,QAASE,KAAKa,MAAMF,EAAOC,MAAMd,SACjCI,SAAWF,KAAKa,MAAMF,EAAOC,MAAMV,WAErCK,EAAazD,KAAK4C,GAClBiB,EAAOG,gBAEPxC,EAAQiC,QAtFlB,yEA8F2Bf,EAAgBxG,GA9F3C,4EA+FQ2G,EAAc1G,KAAKkF,GAAGwB,YAAY,CAAC,QAAS,aAC5CC,EAAcD,EAAYC,YAAY,QACpCC,EAAa,CACjB5E,GAAIjC,EAAQ+H,UACZvB,OAAQA,EACRwB,KAAMhB,KAAKC,UAAUjH,EAAQgI,OAE/BpB,EAAYO,IAAIN,GAtGpB,oFAyG4BL,EAAgBvE,GAzG5C,sGA0GW,IAAIoD,SAAQ,SAACC,EAASC,GACT,EAAKJ,GAAGwB,YAAY,QACRC,YAAY,QAClBnE,MAAM,aACxB+E,WAAWC,YAAYC,KAAK,CAAClB,EAAQvE,KAAM2D,UAAY,SAACC,GAC5D,IAAI8B,EAAS9B,EAAMI,OAAOH,OAC1B,GAAK6B,EAAL,CAIA,IAAMK,EAAO,CACXD,UAAWJ,EAAOC,MAAM3F,GACxB+F,KAAMhB,KAAKa,MAAMF,EAAOC,MAAMI,OAEhC1C,EAAQ0C,QAPN1C,SAjHV,8CAAaJ,EAEIE,W,cCoBJ6C,EAAb,WAaE,WAAYhG,EAAYK,EAAgBJ,EAAiB/B,EAAcE,EAAgBoG,EAAcyB,GAAuB,yBAX5GjG,QAW2G,OAV3GK,YAU2G,OAT3GJ,aAS2G,OAR3G/B,UAQ2G,OAP3GE,YAO2G,OANpH8H,WAA0B,GAM0F,KALpHC,gBAA6B,GAKuF,KAJpH5E,UAAgC,GAIoF,KAHnHiD,WAGmH,OAF1GyB,kBAE0G,EACzHjI,KAAKgC,GAAKA,EACVhC,KAAKqC,OAASA,EACdrC,KAAKiC,QAAUA,EACfjC,KAAKE,KAAOA,EACZF,KAAKI,OAASA,EACdJ,KAAKwG,MAAQA,EACbxG,KAAKiI,aAAeA,EApBxB,0DAgHuBC,GACfA,EAAWvF,QAAU,IAGzB3C,KAAKkI,WAAaA,EAAWE,MAAM,KACnCpI,KAAKmI,gBAAkBnI,KAAKkI,WAAWlI,KAAKkI,WAAWvF,OAAS,MArHpE,uIAyH6BsC,EAAWoD,YAzHxC,cAyHUC,EAzHV,0BA0HwBA,EAAWC,aAAavI,KAAKwG,MAAMgC,KAAMxI,KAAKgC,KA1HtE,WA0HQjC,EA1HR,SA2HqBA,EAAQgI,KA3H7B,2CA4HuB/H,KAAKiI,aAAaF,KAAK/H,KAAKgC,KA5HnD,YA4HMjC,EA5HN,OA4HwDA,SACtCgI,KA7HlB,4CA8HcO,EAAWG,YAAYzI,KAAKwG,MAAMgC,KAAMzI,IA9HtD,gCAgIQA,EAAQgI,KAAO,CACb,6CAjIV,eAqIU5G,EAAW6G,EAAQU,eAAe3I,EAAQgI,MAChDC,EAAQW,mCAAmCxH,EAASM,MAtIxD,kBAuIW,CAACA,KAAMN,EAASM,KAAML,YAAaD,EAASC,cAvIvD,qFA0I4BhB,EAAgB6B,EAAiB8F,GA1I7D,4FA2IU/H,KAAKwG,MAAMoC,KAAKxI,EAAQ6B,EAAS8F,EAAM/H,KAAKkI,WAAWW,OAAO7I,KAAKgC,MA3I7E,kGAuByC8G,EAAkBtC,EAAcyB,GACrE,IAAKa,IAAMA,EAAEjC,UAAYiC,EAAEhC,cACzB,OAAO,KAET,IAAM5G,EAAO6I,IAAOD,EAAEjC,QAAQmC,MACxB5I,EAASiE,EAAO4E,iBAAiBC,0BAAgBJ,EAAEjC,QAAQsC,OAC3DpJ,EAAU,IAAIiI,EAAQc,EAAEjC,QAAQ,cAAeiC,EAAEhC,cAAeoC,0BAAgBJ,EAAEjC,QAAQuC,SAAUlJ,EACxGE,EAAQoG,EAAOyB,GAEjB,OADAlI,EAAQsJ,cAAcP,EAAEjC,QAAQyC,YACzBvJ,IAhCX,yDAmCmDoB,GAC/C,KAAIA,EAASwB,OAAS,GAAtB,CAIA,GADqBxB,EAAS,GACbwD,kBAAmB,CAElC,IADA,IAAI4E,EAAgB,EACZA,EAAgBpI,EAASwB,QAAoD,IAA1CxB,EAASoI,GAAe7G,eAC3B,IAAxCvB,EAASoI,GAAe9H,KAAKkB,QAC3B4G,IAEFpI,EAASwC,OAAO,EAAG4F,GAIrB,IADA,IAAIC,EAA+B,KAC1BC,EAAItI,EAASwB,OAAS,EAAG8G,GAAK,EAAGA,IAAK,CAC7C,IAAMlH,EAAUpB,EAASsI,GACzB,GAA8B,IAA1BlH,EAAQG,gBAAwBsF,EAAQ0B,iBAAiBnH,EAAQd,MACnE,MAEF,GAAIc,EAAQoC,kBAAmB,CAC7B6E,EAAgBC,EAChB,OAIkB,OAAlBD,GACFrI,EAASwC,OAAO6F,EAAerI,EAASwB,OAAS6G,MA9DvD,uCAkEkC/H,GAC9B,OAAOuG,EAAQ2B,gBAAgB3E,KAAKvD,KAnExC,qCAsEgCsG,GAC5B,IAAM5G,EAAsB,GACxBC,EAA4B,GAEhC,GAAgB,iDAAZ2G,EAAK,GAAuD,CAC9D,IAAM6B,EACJ,wEAC2C7B,EAAK,GAAG8B,UAAU,GAD7D,MAEA,KACIC,EAAWlC,IAAMgC,EAAoB7B,EAAKgC,KAAK,OACrDhC,EAAO+B,EAASE,WACbC,QAAO,SAACC,GAAD,MAA0C,eAA3BA,EAAKlH,YAAY2E,SACvCrF,KAAI,SAAC4H,GAAD,OAAe,IAAIC,YAAY,SAASC,OAAOF,EAAK3H,YACxDwH,KAAK,MACL3B,MAAM,MACThH,EAAc0I,EAASE,WACpBC,QAAO,SAACC,GAAD,MAA0C,eAA3BA,EAAKlH,YAAY2E,SACvCrF,KAAI,SAAC4H,GACJ,IAAMG,EAASH,EAAKI,IAAIT,UAAUK,EAAKI,IAAIC,YAAY,SAASC,QAAQ,MAAO,IAC/E,MAAO,CACLxH,YAAakH,EAAKlH,YAAY2E,MAC9BtH,KAAM6J,EAAKlH,YAAYiB,OAAO5D,KAC9BwC,QAAQ,QAAD,OAAUqH,EAAKlH,YAAY2E,MAA3B,mBAA2C0C,OAK1D,OAAKtC,GAILA,EAAKX,SAAQ,SAACqD,GAEZ,IADA,IAAI/H,EAAgB,EACbA,EAAgB+H,EAAK9H,QAAkC,MAAxB8H,EAAK/H,IACzCA,IAEF+H,EAAOA,EAAKZ,UAAUnH,EAAe+H,EAAK9H,QAC1CxB,EAAS0C,KAAK,IAAIa,EAAQ+F,EAAM/H,OAE3B,CAACjB,KAAMN,EAAUC,gBAXf,CAACK,KAAMN,EAAUC,mBAlG9B,KAAa4G,EACa2B,gBAAkB,IAAInF,OAAO,UCRhD,IAAMkG,EAAb,WAME,WAAYrK,EAAcsK,EAAqBnC,EAAcP,GAAuB,yBALpE5H,UAKmE,OAJnEsK,iBAImE,OAHnEnC,UAGmE,OAFlEP,kBAEkE,EACjFjI,KAAKK,KAAOA,EACZL,KAAK2K,YAAcA,EACnB3K,KAAKiI,aAAeA,EACpBjI,KAAKwI,KAAOA,EAVhB,oDAauB1B,GAbvB,sGAegC9G,KAAKiI,aAAa2C,KAAlB,UAA0B9D,EAA1B,YAA2CA,KAf3E,cAeU+D,EAfV,0BAgB6B5F,EAAWoD,YAhBxC,cAgBUC,EAhBV,0BAiBUA,EAAWwC,oBAAoB9K,KAAKwI,KAAMxI,KAAKK,KAAMwK,EAASvH,WAjBxE,cAkBUwF,EAAmB+B,EAASvH,SAAS,GAlB/C,kBAmBW0E,EAAQ+C,yBAAyBjC,EAAG9I,KAAMA,KAAKiI,eAnB1D,uMAuByBjI,KAAKiI,aAAazB,MAAMxG,KAAKK,OAvBtD,UAwByB,KADfmG,EAvBV,OAuB6DA,OAC/CnE,OAxBd,yCAyBa,IAzBb,iCA4BgCrC,KAAKiI,aAAa2C,KAAlB,UAA0BpE,EAAMwE,IAAhC,YAAuCxE,EAAMyE,QA5B7E,cA4BUJ,EA5BV,2BA6B6B5F,EAAWoD,YA7BxC,eA6BUC,EA7BV,2BA8BUA,EAAWwC,oBAAoB9K,KAAKwI,KAAMxI,KAAKK,KAAMwK,EAASvH,WA9BxE,mCA+B2BgF,EAAW4C,qBAAqBlL,KAAKwI,KAAMxI,KAAKK,OA/B3E,eA+BUiD,EA/BV,OAgCU6H,EAA0B7H,EAC7B8H,MAAK,SAACtC,EAAQuC,GAAT,OAAoBvC,EAAEhC,cAAgBuE,EAAEvE,iBAC7CxE,KAAI,SAACwG,GACJ,OAAOd,EAAQ+C,yBAAyBjC,EAAG,EAAM,EAAKb,iBAEpDqD,EAA2B,GAC3BC,EAAqB,GAC3BJ,EAAiB/D,SAAQ,SAACrH,GACxBuL,EAAavL,EAAQiC,IAAMjC,EACO,IAA9BA,EAAQmI,WAAWvF,OACrB4I,EAAQ1H,KAAK9D,GAETuL,EAAavL,EAAQoI,kBACvBmD,EAAavL,EAAQoI,iBAAiB5E,UAAUM,KAAK9D,MAI3DwL,EAAQH,MAAK,SAACtC,EAAYuC,GAAb,OAA4BA,EAAEnL,KAAKsL,OAAS1C,EAAE5I,KAAKsL,UAjDpE,kBAkDWD,GAlDX,6EAqDoBnL,EAAgB6B,EAAiB8F,EAAgBG,GArDrE,wGAsDkClI,KAAKiI,aAAaW,QAtDpD,UAuDiC,OADvB6C,EAtDV,QAuDwBC,KAvDxB,sBAyDYC,EAAW,qCACjBC,QAAQC,MAAMF,GACR,IAAIG,MAAMH,GA3DtB,cA8DU5L,EAAyB,CAC7B8G,QAAS,CACPkF,KAAM3L,EAAO4L,WACbC,WAAYjM,KAAKK,KACjB6L,QAASjK,GAEX8F,KAAMA,GAEJG,GAAcnI,EAAQ8G,UACxB9G,EAAQ8G,QAAQsF,WAAajE,EAAW6B,KAAK,MAvEnD,oBA0E+B0B,EAAgBW,KAAKrM,IA1EpD,WA2E8B,MA3E9B,OA2EqB2L,KA3ErB,uBA6EYC,EAAW,iCACjBC,QAAQC,MAAMF,GACR,IAAIG,MAAMH,GA/EtB,yDCRMU,EAOJ,WAAY7D,EAAc8D,EAAcC,EAAkBC,GAAkB,IAAD,gCAN1DC,aAM0D,OAL1DC,WAK0D,OAJ1DC,WAI0D,OAHnEC,YAGmE,OAWpEC,QAAU,oBAAA/D,EAAAgE,OAAA,yEACR,IAAI1H,SAAQ,SAACC,GAClB,EAAKoH,QAAQM,iBAAiB,QAAQ,WACpC,EAAKC,MAAL,sBAA0B,EAAKN,MAA/B,YAAwC,EAAKC,QAC7C,EAAKM,qBAEL5H,EAAQ,EAAKoH,gBANF,sCAX0D,KAsBpES,WAAa,WAElB,EAAKT,QAAQU,QAQb,EAAKP,OAAOxF,SAAQ,SAAAgG,GAAC,OAAIA,EAAE9H,OAAO,IAAIwG,MAAM,gCAC5C,EAAKc,OAAS,IAjC2D,KAoCpEI,MAAQ,SAACK,GACd,EAAKZ,QAAQL,KAAKiB,IArCuD,KAwCpEC,YAAc,SAACC,EAAoBlI,EAAmBC,GAC3D,EAAKsH,OAAO/I,KAAK,CAAC0J,WAAUlI,UAASC,YAzCoC,KA4CnE2H,mBAAqB,WAC3B,EAAKR,QAAQe,UAAY,SAAC5H,GACxB,IAAM6H,EAAkB,EAAKb,OAAO,GAChCc,EAAWD,EAAgBF,SAAS3H,EAAM+H,MAC9C,EAAKf,OAAOgB,QACZH,EAAgBpI,QAAQqI,IAE1B,EAAKjB,QAAQ/G,QAAU,SAAAmI,GAGrB,MAFA,EAAKjB,OAAOxF,SAAQ,SAAAgG,GAAC,OAAIA,EAAE9H,OAAOuI,MAClC,EAAKX,aACCW,GAER,EAAKpB,QAAQqB,QAAU,WACrB,EAAKlB,OAAOxF,SAAQ,SAAAgG,GAAC,OAAIA,EAAE9H,OAAO,IAAIwG,MAAM,2BApD9C9L,KAAKyM,QAAU,IAAIsB,UAAUC,qCAC7BhO,KAAK0M,MAAQlE,EACbxI,KAAK2M,MAAQL,EACbtM,KAAK4M,OAAS,IAwDZqB,E,YAGJ,WAAYC,GAAyB,IAAD,uBAClC,4CAAMA,KAHDC,mBAE6B,IAW7BtB,QAAU,4BAAA/D,EAAAgE,OAAA,kEAAAhE,EAAA,MACM,EAAKqF,cAActB,WADzB,cACTuB,EADS,kBAAAtF,EAAA,MAEQ,EAAKuF,SAASC,UAAQC,WAF9B,cAETb,EAFS,wCAIVA,EAJU,CAKbU,YALa,sCAXmB,EAoB7BlB,WAAa,kBAAM,EAAKiB,cAAcjB,cApBT,EAsB7BmB,SAAW,SAACG,EAAkBC,GAAnB,OAChB,IAAIrJ,SAAQ,SAACC,EAASC,GACpB,EAAK6I,cAAcb,aAAY,SAAC7L,GAAD,OAAkBsF,KAAKa,MAAMnG,KAAO4D,EAASC,GACxEmJ,GACF,EAAKN,cAAcnB,MAAMyB,MAI1BC,MAAK,SAAChB,GAAD,OAAoBA,EAAShC,KAAO,IAAMgC,EAAWtI,QAAQE,OAAOoI,OA9B1C,IAGhClF,EAIE0F,EAJF1F,KAHgC,EAO9B0F,EAHF5B,YAJgC,MAIzB,IAJyB,IAO9B4B,EAFF3B,eALgC,WAO9B2B,EADF1B,kBANgC,MAMnB,GANmB,SAQlC,EAAK2B,cAAgB,IAAI9B,EAAa7D,EAAM8D,EAAMC,EAASC,GARzB,E,2BAHfmC,KA6CVC,EAAb,WAQE,WAAYpG,EAAc8D,GAAgB,yBAJ1B9D,UAIyB,OAHzB8D,UAGyB,OAFxBrE,kBAEwB,EACvCjI,KAAKwI,KAAOA,EACR8D,IACFtM,KAAKsM,KAAOA,GAEdtM,KAAKiI,aAAe2G,EAAOC,mBAAmB7O,KAAKwI,KAAMxI,KAAKsM,MAblE,6KA0C6BtM,KAAKiI,aAAa4E,WA1C/C,UA2C4B,OADlBiC,EA1CV,QA2CmBpD,KA3CnB,sBA4CYI,MAAM,4BA5ClB,iCA8C+B9L,KAAKiI,aAAa8G,gBA9CjD,iBA+CsBA,aAAaC,KAAKjM,SAAS,cA/CjD,uBAgDY+I,MAAM,+DAhDlB,iCAkDWgD,EAAWV,QAlDtB,uFAqD8B/N,GArD9B,yGAsD6BL,KAAKiI,aAAagH,eAAe5O,IAtD9D,UAuDyC,KAD/B6O,EAtDV,QAuDmBA,WAAWvM,OAvD9B,yCAwDa,MAxDb,gCA0DWuM,EAAWA,WAAW5M,KAAI,SAAC6M,GAChC,IAAMxE,EAAwC,qBAAnBwE,EAAGxE,YAA8B,GAAKwE,EAAGxE,YACpE,OAAO,IAAID,EAAMyE,EAAG9O,KAAMsK,EAAa,EAAKnC,KAAM,EAAKP,iBACtD,IA7DP,yLAkE6BjI,KAAKiI,aAAagH,eAAejB,aAlE9D,cAkEUkB,EAlEV,yBAmEWA,EAAWA,WAAW5M,KAAI,SAAC6M,GAChC,IAAMxE,EAAwC,qBAAnBwE,EAAGxE,YAA8B,GAAKwE,EAAGxE,YACpE,OAAO,IAAID,EAAMyE,EAAG9O,KAAMsK,EAAa,EAAKnC,KAAM,EAAKP,kBArE7D,mKAiBwB,OAAhBjI,KAAKuG,OAjBb,oBAmBY6I,EAAcpB,OADdqB,EAAUrB,mBAECoB,EApBvB,sBAqBc,IAAItD,MAAM,kFArBxB,cAuBM9L,KAAKuG,OAAS,IAAIqI,EAAOS,EAASC,SAASF,IAvBjD,mBAwB8BpP,KAAKuG,OAAOgJ,gCAxB1C,OAwBYC,EAxBZ,OAyBMxP,KAAKyP,2BAA6BC,aAAa,kBAAMF,EAAUpD,KAAK,kBAClEpM,KAAK2P,qBA1Bb,iCA4BW3P,KAAKuG,QA5BhB,2FA+BoCiC,EAAc8D,GAC9C,IAAMsD,EAA+B,CACnCpH,QAKF,OAHI8D,IAASuD,MAAMvD,KACjBsD,EAActD,KAAOA,GAEhB,IAAI2B,EAAS2B,OAtCxB,KAAahB,EACIrI,OAAwB,KAD5BqI,EAEIe,yB,EAFJf,EAGIa,2BAAoD,K,YC3H9D,SAASK,EAAiC7P,GAE7C,IACK8P,EAAS9P,EAAT8P,MAEP,OACE,uBAAKhO,QAAS,kBAAMgO,EAAMC,QAAUD,EAAMC,QAAQD,QAASnL,IACzD,uBAAKnF,UAAW,cACbsQ,EAAMrQ,MACL,uBAAKD,UAAU,SACb,gBAAC,IAAD,CAAiBC,KAAMqQ,EAAMrQ,QAGjC,gBAAC,IAAD,CAAMD,UAAU,UAAU2C,GAAI2N,EAAME,KAClC,wBAAMxQ,UAAW,SAAWsQ,EAAMG,KAAO,QAAU,KAAMH,EAAMI,OAAa,2BAC5E,wBAAM1Q,UAAW,YAAcsQ,EAAMG,KAAO,QAAU,KAAMH,EAAMK,aCRrE,SAASC,EAA4BpQ,GAExC,IACK0N,EAAQ1N,EAAR0N,KAEP,OACE,6BACGA,EAAKrL,KAAI,SAACyN,EAAOvN,GAAR,OAAkB,kBAACsN,EAAD,CAAWrN,IAAKD,EAAOuN,MAAOA,QCDzD,SAASO,IACd,IAAMC,EAAmBC,aAAaC,QAAQ,oBAE9C,OAAKF,EAGExJ,KAAKa,MAAM2I,GAFT,GAcJ,SAASG,EAAgBlK,GAC9B,IAAMmK,EAAeH,aAAaC,QAAQjK,GAE1C,OAAKmK,EAGE5J,KAAKa,MAAM+I,GAFT,G,qBC3BJ,SAASC,EAAO3Q,GAOnB,IACK4Q,EAAa5Q,EAAb4Q,UACP,OACE,yBAAKpR,UAAU,mBACb,kBAACqR,EAAD,MACA,yBAAKrR,UAAU,cACb,kBAACsR,EAAD,CAAS1Q,KAAMJ,EAAMI,KAAM4P,IAAKhQ,EAAMgQ,MACrCY,GAAaA,EAAU5G,QACxB,2BAAOxK,UAAU,SAASuR,KAAK,OAAOC,YAAY,YAC3CC,SAAU,SAAChP,GAAD,OAAO2O,EAAU5G,OAAO/H,EAAE8D,OAAO2B,MAAMwJ,mBAGzDlR,EAAMmR,SAAWnR,EAAMmR,QAAQ9O,KAAI,SAAC+O,EAAQ7O,GAAT,OAClC,kBAAC8O,EAAD,CAAQ7O,IAAKD,EAAO9C,KAAM2R,EAAO3R,KAAMW,KAAMgR,EAAOhR,KAAM4P,IAAKoB,EAAOpB,IAAKD,QAASqB,EAAOrB,cAOnG,SAASc,IACP,OACE,yBAAKrR,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,UAAU2C,GAAI,KAC5B,yBAAKa,IAAKsO,IAAMrO,IAAI,WAM5B,SAAS6N,EAAQ9Q,GAKb,OAAIA,EAAMgQ,IAEN,kBAAC,IAAD,CAAMxQ,UAAU,UAAU2C,GAAE,UAAKnC,EAAMgQ,MACrC,4BAAKhQ,EAAMI,OAMjB,4BAAKJ,EAAMI,MAIf,SAASiR,EAAOrR,GAKZ,IACKP,EAA4BO,EAA5BP,KAAMW,EAAsBJ,EAAtBI,KAAM4P,EAAgBhQ,EAAhBgQ,IAAKD,EAAW/P,EAAX+P,QACxB,OAAIC,EAEA,kBAAC,IAAD,CAAM7N,GAAI6N,EAAKxQ,UAAU,WACvB,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAYC,KAAMA,GAAOW,KAM7B2P,EAEA,yBAAKvQ,UAAU,OAAOsC,QAAS,kBAAMiO,MACnC,kBAAC,EAAD,CAAYtQ,KAAMA,GAAOW,IAM7B,yBAAKZ,UAAU,QACb,kBAAC,EAAD,CAAYC,KAAMA,GAAOW,IC5FxB,SAASmR,IACd,OACE,yBAAK/R,UAAU,mBACb,0BAAMA,UAAU,YAAhB,SACA,uBAAGiB,KAAK,wCAAwCjB,UAAU,uBACxD,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,YADjC,mBCqBC,IAAM+R,GAAb,2MAEExQ,MAAyB,CACvByQ,SAAS,EACTlL,MAAO,KACP+E,QAAS,GACToG,gBAAiB,GACjBhB,aAAc,IAPlB,2LAWyB/B,EAAOvG,YAXhC,cAWU9B,EAXV,0BAYwBA,EAAOqL,eAAe5R,KAAKC,MAAM+D,MAAMC,OAAO5D,OAZtE,UAakB,QADRmG,EAZV,+BAcMxG,KAAKwB,SAAS,CACZkQ,SAAS,EACTlL,MAAO,OAhBf,qDAoB0BA,EAAM+E,WApBhC,QAoBUA,EApBV,OAqBUoF,EAAeD,EAAgBlK,EAAMnG,MAE3CL,KAAKwB,SAAS,CAACkQ,SAAS,EAAOlL,QAAO+E,UAASoF,eAAcgB,gBAAiBpG,IAvBlF,iFA0BY,IAAD,OACAvH,EAAShE,KAAKC,MAAd+D,MADA,EAE4ChE,KAAKiB,MAAjDuF,EAFA,EAEAA,MAAOkL,EAFP,EAEOA,QAASnG,EAFhB,EAEgBA,QAASoG,EAFzB,EAEyBA,gBAS1BE,EAA4B,OAAVrL,EACpB,GACAmL,EAAgBrP,KAAI,SAAAvC,GAAO,MAAK,CAChCoQ,MAAOpQ,EAAQkC,QACfmO,SAAS,GAAD,OAAKrQ,EAAQK,OAAOC,KAApB,cAA8BN,EAAQG,KAAKC,OAAO,mBAC1D8P,IAAI,GAAD,OAAKjM,EAAMiM,IAAX,YAAkBlQ,EAAQsC,QAC7B6N,MAAO,EAAKjP,MAAM0P,aAAa7L,MAAK,SAAAgE,GAAC,OAAIA,IAAM/I,EAAQiC,MACvDgO,QAAS,YH7CV,SAAwBxJ,EAAezG,GAC5C,IAAM4Q,EAAeD,EAAgBlK,GAE/BmK,EAAa7L,MAAK,SAAAgE,GAAC,OAAIA,IAAMtC,MAGnCgK,aAAasB,QAAQtL,EAAOO,KAAKC,UAAU2J,EAAa9H,OAAO9I,KGwCvDgS,CAAevL,EAAMnG,KAAMN,EAAQiC,IACnC,EAAKR,SAAS,CAACmP,aAAc,EAAK1P,MAAM0P,aAAa9H,OAAO9I,EAAQiC,WAIpEoP,EAAoB,CACxB,CACE/Q,KAAM,QACNX,KAAM,aACNuQ,IAAe,OAAVzJ,EAAiB,GAAjB,gBAA+BA,EAAMnG,QAIxCyB,EAAsB,OAAV0E,EAAiBxC,EAAMC,OAAO5D,KAAOmG,EAAMnG,KAE7D,OACE,yBAAKZ,UAAU,YACb,kBAACyE,EAAA,OAAD,KACE,0CAAgBpC,IAElB,kBAAC8O,EAAD,CAAQvQ,KAAMyB,EAAW+O,UAAW,CAAC5G,OAnC1B,SAACxI,GACd,IAAMkQ,EAAkBpG,EAAQtB,QAC9B,SAAClK,GAAD,OAAaA,EAAQkC,QAAQkP,cAAcpO,SAAStB,IAAS1B,EAAQK,OAAOC,KAAK8Q,cAAcpO,SAAStB,MAE1G,EAAKD,SAAS,CAACmQ,sBA+BiC1B,IAAKjM,EAAMiM,IAAKmB,QAASA,IACvE,yBAAK3R,UAAU,iBAEXiS,EACI,kBAAC,EAAD,MACW,OAAVlL,EAAiB,mBACpB,kBAAC,IAAD,CAAO1F,MlBnGa,uBkBqGhB,SAAAC,GAAa,OAAIA,EAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiR,KAAI,UAAKhO,EAAMgO,KAAX,YAA2BC,OAAQ,SAAAhS,GAAK,OACjD,kBAAC,EAAD,iBAAkBA,EAAlB,CAAyBuG,MAAOA,EAClBzG,QAASwL,EAAQzG,MAAK,SAAAoN,GAAM,OAAIA,EAAO7P,SAAWiN,SAASrP,EAAM+D,MAAMC,OAAO5B,YAC3E,WAEnB,kBAAC,IAAD,CAAO2P,KAAI,UAAKhO,EAAMgO,OACpB,kBAAC3B,EAAD,CAAM1C,KAAMkE,MAIhB,kBAAC,EAAD,CACEzN,QAAS,kBAACiM,EAAD,CAAM1C,KAAMkE,IACrBtP,QACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyP,KAAI,UAAKhO,EAAMgO,KAAX,YAA2BC,OAAQ,SAAAhS,GAAK,OACjD,kBAAC,EAAD,iBAAkBA,EAAlB,CAAyBuG,MAAOA,EAClBzG,QAASwL,EAAQzG,MAAK,SAAAoN,GAAM,OAAIA,EAAO7P,SAAWiN,SAASrP,EAAM+D,MAAMC,OAAO5B,YAC3E,WAEnB,kBAAC8P,GAAD,CAAUlC,IAAKjM,EAAMgO,KAAMlQ,UAAW0E,EAAMnG,cAO9D,kBAACmR,EAAD,WAtGR,GAAiC5R,IAAMC,WA4GvC,SAASsS,GAASlS,GAIhB,OACE,kBAAC,IAAD,CAAO+R,KAAM/R,EAAMgQ,KACjB,yBAAKxQ,UAAU,aACb,yBAAKA,UAAU,kBACZ,cAAgBQ,EAAM6B,WAEzB,yBAAKrC,UAAU,kBAAf,6BAC4B,kBAAC,IAAD,CAAM2C,GAAE,gBAAWnC,EAAM6B,YAAzB,SAD5B,kB,ICvHFsQ,G,2MAIJnR,MAAyB,CACvByQ,SAAS,EACTW,SAAS,EACTC,MAAM,EACN9L,MAAO,KACPzG,QAAS,KACTK,OAAQ,GACR6B,QAAS,GACTM,QAAS,I,0KAIFyB,EAAShE,KAAKC,MAAd+D,M,mBACc4K,EAAOvG,Y,cAAtB9B,E,0BACcA,EAAOqL,eAAe5N,EAAMC,OAAO5D,O,UAAjDmG,E,OACNxG,KAAKwB,SAAS,CACZpB,OAAQoQ,aAAaC,QAAQ,YAE1BjK,E,wBACHxG,KAAKwB,SAAS,CACZgF,MAAO,KACPzG,QAAS,KACT2R,SAAS,I,8BAIR1N,EAAMC,OAAO5B,O,wBAChBrC,KAAKwB,SAAS,CACZgF,QACAzG,QAAS,KACT2R,SAAS,I,sDAISlL,EAAMzG,QAAQuP,SAAStL,EAAMC,OAAO5B,U,WAApDtC,E,+BAEJC,KAAKwB,SAAS,CACZgF,MAAO,KACPzG,QAAS,KACT2R,SAAS,I,2BAIPzP,EAAUlC,EAAQkC,QAAQsQ,WAAWH,EAAMI,UAAYzS,EAAQkC,QAAUmQ,EAAMI,SAAWzS,EAAQkC,QACxGjC,KAAKwB,SAAS,CACZgF,QACAzG,UACAkC,UACAyP,SAAS,I,6EAIF9L,G,uFACTA,EAAM6M,iBACNzS,KAAKwB,SAAS,CACZ6Q,SAAS,I,EAEwCrS,KAAKiB,MAAjDuF,E,EAAAA,MAAOzG,E,EAAAA,QAASkC,E,EAAAA,QAAS7B,E,EAAAA,OAAQmC,E,EAAAA,QACnCiE,E,uBACHoF,QAAQC,MAAM,wC,6BAGV6G,EAAcrO,EAAO4E,iBAAiB7I,GAC5CwL,QAAQ+G,IAAI,SAAUvS,EAAQsS,GAC9B9G,QAAQ+G,IAAI,UAAW1Q,GACvB2J,QAAQ+G,IAAI,UAAWpQ,GAEvBiO,aAAasB,QAAQ,SAAU1R,IAC3BL,E,4CACIA,EAAQ6S,aAAaF,EAAazQ,EAAS,CAACM,K,kEAE5CiE,Q,IAAAA,O,EAAAA,EAAOoC,KAAK8J,EAAazQ,EAAS,CAACM,K,QAE3CvC,KAAKwB,SAAS,CACZ6Q,SAAS,EACTC,MAAM,I,iFAIA,IAAD,OACAtO,EAAShE,KAAKC,MAAd+D,MADA,EAEoEhE,KAAKiB,MAAzEuF,EAFA,EAEAA,MAAOzG,EAFP,EAEOA,QAAS2R,EAFhB,EAEgBA,QAASzP,EAFzB,EAEyBA,QAAS7B,EAFlC,EAEkCA,OAAQmC,EAF1C,EAE0CA,QAAS8P,EAFnD,EAEmDA,QAASC,EAF5D,EAE4DA,KAE/DO,EAAuB,OAAVrM,EAAiBxC,EAAMC,OAAO5D,KAAOmG,EAAMnG,KAO5D,OANIN,IACF8S,GAAU,WAAQ9S,EAAQsC,OAAhB,eAMV,yBAAK5C,UAAU,YACb,kBAACyE,EAAA,OAAD,KACE,sDAEF,kBAAC0M,EAAD,CAAQvQ,KAAMwS,EAAY5C,IAAKjM,EAAMiM,MACrC,yBAAKxQ,UAAU,iBAEXiS,EAAU,kBAAC,EAAD,MAAwB,OAAVlL,EAAiB,kBACvC,0BAAM/G,UAAU,eAAeqT,SAAU,SAAClN,GAAD,OAAuC,EAAKwG,KAAKxG,KACxF,yBAAKnG,UAAU,eACb,2BACEY,KAAK,SACL2Q,KAAK,OACLC,YAAY,2BACZtJ,MAAOvH,EACP8Q,SAAU,SAACtL,GACT,EAAKpE,SAAS,CACZpB,OAAQwF,EAAMmN,cAAcpL,YAKpC,yBAAKlI,UAAU,eACb,2BACEY,KAAK,UACL2Q,KAAK,OACLC,YAAY,kBACZtJ,MAAO1F,EACPiP,SAAU,SAACtL,GACT,EAAKpE,SAAS,CACZS,QAAS2D,EAAMmN,cAAcpL,YAKrC,yBAAKlI,UAAU,eACb,2BAAOY,KAAK,QAAQ2Q,KAAK,OAAOrJ,MAAOnB,EAAMnG,KAAM2S,UAAQ,EAACC,UAAW,KAExElT,GACC,yBAAKN,UAAU,eACb,2BACEY,KAAK,cACL2Q,KAAK,SACLrJ,MAAK,OAAE5H,QAAF,IAAEA,OAAF,EAAEA,EAASmI,WAAWW,OAAO9I,EAAQiC,IAAI+H,KAAK,KACnDiJ,UAAQ,KAId,yBAAKvT,UAAU,eACjB,8BACEkI,MAAOpF,EACP2O,SAAU,SAACtL,GACT,EAAKpE,SAAS,CACZe,QAASqD,EAAMmN,cAAcpL,YAKjC,yBAAKlI,UAAU,eACb,4BAAQA,UAAU,SAASuR,KAAK,SAASkC,SAAUb,GAAWC,GAE1DD,EAAU,kBAAC,IAAD,CAAiB3S,KAAK,UAAUC,MAAI,IAC3C2S,EAAO,QAAU,QAGxB,4BAAQ7S,UAAU,OAAOuR,KAAK,QAAQjP,QAAS,kBAAM,EAAK9B,MAAMkT,QAAQC,WAAxE,mB,GAhKExT,IAAMC,WAApBuS,GAEUI,SAAW,OAwKpB,IAAMa,GAAOC,YAAWlB,I,SCnLxB,SAASmB,KAAa,IAAD,EACAC,mBAAyB,CACjDC,OAAQ,GACRC,WAAY,GACZC,qBAAsB,KAJE,oBACnB1S,EADmB,KACZO,EADY,OAMIgS,oBAAS,GANb,oBAMnB9B,EANmB,KAMVkC,EANU,KAQ1BC,qBAAU,YACR,uBAAA/K,EAAAgE,OAAA,uDACE8G,GAAW,GADb,WAAA9K,EAAA,MAGuB8F,EAAOvG,YAH9B,cAGQ9B,EAHR,kBAAAuC,EAAA,MAIuBvC,EAAOkN,UAJ9B,OAIQA,EAJR,OAKQE,EAAuBrD,IAC7B9O,EAAS,eACJP,EADG,CAENwS,SACAE,0BAGFC,GAAW,GAZb,sCAeAE,KAIA,IAEF,IAAM7J,EAAS,SAACyJ,GACdlS,EAAS,eAAIP,EAAL,CAAYyS,iBAGhBK,EAA0B,SAACvN,GAC3BwN,EAAkBxN,EAAM2J,OL5CzB,SAA0B3J,GAC/B,IAAM+J,EAAmBD,IAEpBC,EAAiBzL,MAAK,SAAAmP,GAAC,OAAIA,IAAMzN,MAGtCgK,aAAasB,QAAQ,mBAAoB/K,KAAKC,UAAUuJ,EAAiBtG,QAAO,SAAAgK,GAAC,OAAIA,IAAMzN,OKuCvF0N,CAAiB1N,EAAM2J,OLtDtB,SAAwB3J,GAC7B,IAAM+J,EAAmBD,IAEnBC,EAAiBzL,MAAK,SAAAmP,GAAC,OAAIA,IAAMzN,MAGvCgK,aAAasB,QAAQ,mBAAoB/K,KAAKC,UAAUuJ,EAAiB1H,OAAOrC,KKkD5E2N,CAAe3N,EAAM2J,OAEvB,IAAMwD,EAAuBrD,IAC7B9O,EAAS,eAAIP,EAAL,CAAY0S,2BAGhBS,EAAY,SAAC5N,GACjB,OAAIwN,EAAkBxN,EAAMnG,MACnB,eAEF,eAGHgU,EAAuB,CAC3BhU,KAAM,gBACNX,KAAM,MACNuQ,IAAK,kBAGDqE,EAA6B,CACjCjU,KAAM,gBACNX,KAAM,OACNuQ,IAAK,KAGDsE,EAA0B,CAC9BlU,KAAM,aACNX,KAAM,OACNuQ,IAAK,WAGDuE,EAAyB,CAACH,EAAcC,GAExCG,EAAgC,CAACJ,EAAcE,GAE/CG,EAA0B,CAACH,EAAiBD,GAU5CN,EAAoB,SAAClS,GACzB,OAAOb,EAAM0S,qBAAqB5Q,SAASjB,IAGvC6S,EAAY,SAACC,GACjB,OAAO3T,EAAMwS,OAAOxJ,QAAO,SAAAzD,GAAK,OAbV,SAACA,GAAkB,IAClCkN,EAAczS,EAAdyS,WACP,MAAmB,KAAfA,IAGIlN,EAAMnG,KAAK8Q,cAAcpO,SAAS2Q,IAAelN,EAAMmE,YAAYwG,cAAcpO,SAAS2Q,IAQ9DmB,CAAgBrO,MAA8B,IAAnBoO,GAA2BZ,EAAkBxN,EAAMnG,WAG9GgP,EAA2CrB,iBACjD,OACE,yBAAKvO,UAAU,YACb,kBAACyE,EAAA,OAAD,KACE,0CAAgBmL,IAElB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2C,KAAK,WACV,kBAACpB,EAAD,CAAQvQ,KAAMgP,EAASwB,UAAW,CAAC5G,UAASmH,QAASoD,KAEvD,kBAAC,IAAD,CAAOxC,KAAK,kBACV,kBAACpB,EAAD,CAAQvQ,KAAMgP,EAASwB,UAAW,CAAC5G,UAASmH,QAASsD,KAEvD,kBAAC,IAAD,CAAO1C,KAAK,KACV,kBAACpB,EAAD,CAAQvQ,KAAMgP,EAASwB,UAAW,CAAC5G,UAASmH,QAASqD,MAGzD,yBAAKhV,UAAU,iBAEXiS,EAAU,kBAAC,EAAD,MACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,WACV,kBAAC3B,EAAD,CAAM1C,KAAMgH,IAAYrS,KAAI,SAACkE,GAAD,MAAY,CACtC2J,MAAO3J,EAAMnG,KACb+P,SAAU5J,EAAMmE,YAChBsF,IAAI,WAAD,OAAazJ,EAAMnG,aAG1B,kBAAC,IAAD,CAAO2R,KAAK,kBACV,kBAAC3B,EAAD,CAAM1C,KAAMgH,IAAYrS,KAAI,SAACkE,GAAD,MAAY,CACtC2J,MAAO3J,EAAMnG,KACb+P,SAAU5J,EAAMmE,YAChBsF,IAAK,GACLD,QAAS+D,EACTrU,KAAM0U,EAAU5N,UAGpB,kBAAC,IAAD,CAAOwL,KAAK,KAC6B,IAAtC/Q,EAAM0S,qBAAqBhR,OACxB,yBAAKlD,UAAU,aACf,yBAAKA,UAAU,kBAAf,sBACqB,kBAAC,IAAD,CAAM2C,GAAE,kBAAR,4BADrB,qBAIA,kBAACiO,EAAD,CAAM1C,KAAMgH,GAAU,GAAMrS,KAAI,SAACkE,GAAD,MAAY,CAC5C2J,MAAO3J,EAAMnG,KACb+P,SAAU5J,EAAMmE,YAChBsF,IAAI,WAAD,OAAazJ,EAAMnG,eAMpC,kBAACmR,EAAD,O,IC1JesD,G,iLAEjB,OACE,yBAAKrV,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuS,KAAK,gBAAgB+C,UAAWtD,KACvC,kBAAC,IAAD,CAAOO,KAAK,uBAAuB+C,UAAW1B,KAC9C,kBAAC,IAAD,CAAOrB,KAAK,IAAI+C,UAAWxB,W,GAPJ3T,IAAMC,WCIjCmV,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpR,MACvB,2DA+CJ,SAASqR,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACT5G,MAAK,SAAAiH,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5U,QACfuU,UAAUC,cAAcO,YAI1BpK,QAAQ+G,IACN,iHAKE4C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/J,QAAQ+G,IAAI,sCAGR4C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAtK,GACLD,QAAQC,MAAM,4CAA6CA,M,+BCnFjEuK,KAAQlP,IAAImP,KAAeC,KAAgBC,KAAkBC,KAAQC,KAASC,KAAWC,KAAaC,KAAOC,KAC3GC,KAAcC,KAAQC,MACxBC,IAAShF,OACP,kBAAC,IAAD,CAAYiF,SAAUlJ,IACpB,kBAAC,GAAD,OAEFmJ,SAASC,eAAe,SDDnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI6B,IACpBrJ,SACAkH,OAAOC,SAASzU,MAEJ4W,SAAWpC,OAAOC,SAASmC,OAIvC,OAIFpC,OAAOnI,iBAAiB,QAAQ,WAC9B,IAAMuI,EAAK,UAAMtH,SAAN,sBAEPgH,KAgEV,SAAiCM,EAAeC,GAE9CgC,MAAMjC,EAAO,CACXzO,QAAS,CAAC,iBAAkB,YAE3B6H,MAAK,SAAAhB,GAEJ,IAAM1K,EAAc0K,EAAS7G,QAAQ2Q,IAAI,gBAEnB,MAApB9J,EAAS+J,QACO,MAAfzU,IAA8D,IAAvCA,EAAYY,QAAQ,cAG5C4R,UAAUC,cAAciC,MAAMhJ,MAAK,SAAAiH,GACjCA,EAAagC,aAAajJ,MAAK,WAC7BwG,OAAOC,SAASyC,eAKpBvC,GAAgBC,EAAOC,MAG1BY,OAAM,WACLvK,QAAQ+G,IACN,oEAvFAkF,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAMhJ,MAAK,WACjC9C,QAAQ+G,IACN,iHAMJ0C,GAAgBC,EAAOC,OCzB/BE,I,mBClCAqC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.881c8b4a.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading\">\n          <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n        </div>\n      </div>\n    );\n  }\n}\n","import {ArticleInterface} from \"./Article\";\nimport React, { Fragment } from \"react\";\nimport Media from \"react-media\";\nimport {LARGE_SCREEN_QUERY, SMALL_SCREEN_QUERY} from \"../template/Constants\";\n\ninterface Props {\n  article: ArticleInterface\n}\n\ninterface State {\n}\n\nexport class ArticleAuthor extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n    return (\n      <div className=\"article-detail-author\">\n        {article.date.format(\"DD.MM.YYYY HH:mm\")} by {article.author.name}\n        <Media queries={{small: SMALL_SCREEN_QUERY, large: LARGE_SCREEN_QUERY}}>\n          {matches => (\n            <Fragment>\n              {matches.small && <br />}\n              {matches.large && <Fragment>&nbsp;</Fragment>}\n            </Fragment>\n          )}\n        </Media>\n        <a href={`mailto:${article.author.email}`}>{article.author.email}</a>\n      </div>\n    );\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 47rem)\";\nexport const LARGE_SCREEN_QUERY = \"(min-width: 47.1rem)\";\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {SMALL_SCREEN_QUERY} from \"./Constants\";\nimport Media from \"react-media\";\n\ninterface Props {\n  icon: IconProp\n}\n\ninterface State {\n}\n\nexport class IconButton extends React.Component<Props, State> {\n\n  render() {\n    const {icon, children} = this.props;\n    return (\n      <Media query={SMALL_SCREEN_QUERY}>\n        {\n          screenIsSmall => screenIsSmall ?\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>\n            </div> :\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>&nbsp;&nbsp;{children}\n            </div>\n        }\n      </Media>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\nimport {ArticleAuthor} from \"./ArticleAuthor\";\nimport {IconButton} from \"../template/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {Attachment} from \"./Attachment\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClickHeader: ((id: ArticleId) => void) | null;\n  hasSimpleHeader: boolean;\n  baseUrl: string;\n  groupName: string;\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null,\n  hasSimpleHeader: false\n};\n\ninterface State {\n  contents: Content[];\n  attachments: Attachment[];\n  isContentLoading: boolean;\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: [],\n    attachments: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: [], attachments: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents.text, attachments: contents.attachments});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  render() {\n    const {article, showContent, onClickHeader, hasSimpleHeader, groupName} = this.props;\n    const {contents, attachments, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          {hasSimpleHeader && <div className=\"article-detail-chevron\">\n            {\n              showContent ? <FontAwesomeIcon icon=\"chevron-down\"/> : <FontAwesomeIcon icon=\"chevron-right\"/>\n            }\n          </div> }\n          {hasSimpleHeader\n            ? <ArticleAuthor article={article}/>\n\n            : <div>\n              <h1 className=\"article-detail-title\">{article.subject}</h1>\n              <ArticleAuthor article={article}/>\n            </div>\n          }\n          <div className=\"article-buttons\">\n            <div className=\"article-button\">\n              <a href={`mailto:${article.author.email}`} className=\"no-link\" onClick={e => e.stopPropagation()}>\n                <IconButton icon=\"reply\">Reply</IconButton>\n              </a>\n            </div>\n            <div className=\"article-button\">\n              <Link to={`/post/${groupName}/${article.number}`} className=\"no-link\">\n                <IconButton icon=\"hand-point-right\">Follow Up</IconButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n          {attachments.length > 0 &&\n          <div>\n            <p>Attachments:</p>\n            <ul className=\"attachments\">\n              {attachments.map((attachment) =>\n                <li key={attachment.name}>\n                  <a\n                    href={attachment.dataUrl}\n                    download={attachment.name}\n                  >\n                    {['image/png', 'image/gif', 'image/jpeg', 'image/svg+xml'].includes(attachment.contentType) ? (\n                      <img src={attachment.dataUrl}  alt={attachment.name} />\n                      ) : (\n                      <span>{attachment.name}</span>\n                      )\n                    }\n                  </a>\n                </li>)}\n            </ul>\n          </div>\n          }\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick, baseUrl, groupName} = this.props;\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} baseUrl={baseUrl} groupName={groupName} showContent={showContent} onClickHeader={id => onClick(id)}\n                       hasSimpleHeader={true}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps} baseUrl={baseUrl} groupName={groupName} />\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)} />\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceHideIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceHideIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceHideIds} = this.state;\n    if (forceHideIds.includes(articleId)) {\n      forceHideIds.splice(forceHideIds.indexOf(articleId), 1)\n    } else {\n      forceHideIds.push(articleId);\n    }\n    this.setState({forceHideIds: forceHideIds});\n  }\n\n  render() {\n    const {articles, baseUrl, groupName} = this.props;\n    const {forceHideIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry baseUrl={baseUrl} groupName={groupName} key={article.id} article={article}\n                                        showContent={!forceHideIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  number: string;\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article, match} = this.props;\n    const baseUrl = `/groups/${match.params.name}/`;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail baseUrl={baseUrl} groupName={match.params.name} article={article} showContent={true}/>\n        <CollapsibleThreadList baseUrl={baseUrl} groupName={match.params.name} articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content\">{this.props.content}</div>\n      </div>\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n\n  public toString(): string {\n    return `${this.name} <${this.email}>`;\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Article} from \"newsie\";\n\nexport class GroupCache {\n\n  private static cache: GroupCache;\n\n  private db: any;\n\n  public static async instance(): Promise<GroupCache> {\n    if (this.cache) {\n      return GroupCache.cache;\n    }\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open(\"newsR\");\n\n      openRequest.onerror = () => {\n        reject();\n      };\n      openRequest.onsuccess = (event) => {\n        this.cache = new GroupCache(openRequest.result);\n        resolve(this.cache);\n      };\n      openRequest.onupgradeneeded = GroupCache.upgrade;\n    })\n  }\n\n  // todo: event type\n  private static upgrade(event: any) {\n    const db = event.target.result;\n\n    let overStore = db.createObjectStore(\"over\", { keyPath: \"id\" });\n    overStore.createIndex(\"server-group\", [\"server\", \"group\"], {unique:false});\n    overStore.createIndex(\"server\", \"server\", { unique: false });\n    overStore.createIndex(\"group\", \"group\", { unique: false });\n    overStore.createIndex(\"articleNumber\", \"articleNumber\", { unique: false });\n    overStore.createIndex(\"headers\", \"headers\", { unique: false });\n    overStore.createIndex(\"metadata\", \"metadata\", { unique: false });\n\n    let bodyStore = db.createObjectStore(\"body\", { keyPath: \"id\" });\n    bodyStore.createIndex(\"server-id\", [\"server\", \"id\"], {unique:false});\n    bodyStore.createIndex(\"server\", \"server\", { unique: false });\n    bodyStore.createIndex(\"body\", \"articleNumber\", { unique: false });\n  }\n\n  constructor(db: any) {\n    this.db = db;\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistOverArticle(server: string, group: string, overArticle: any) {\n    let transaction = this.db.transaction([\"over\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"over\");\n    const storageObj = {\n      id: overArticle.headers[\"MESSAGE-ID\"],\n      \"server-group\": [server, group],\n      server: server,\n      group: group,\n      articleNumber: overArticle.articleNumber,\n      headers: JSON.stringify(overArticle.headers),\n      metadata: JSON.stringify(overArticle.metadata)\n    };\n    objectStore.add(storageObj);\n  }\n\n  // todo: fix overview type\n  public async persistOverArticles(server: string, group: string, overviewArticles: Article[]) {\n    overviewArticles.forEach((overArticle: any) => this.persistOverArticle(server, group, overArticle));\n  }\n\n  public async retrieveOverArticles(server: string, group: string): Promise<any[]> {\n    return new Promise((resolve => {\n      let transaction = this.db.transaction('over');\n      let objectStore = transaction.objectStore('over');\n      let index = objectStore.index(\"server-group\");\n      const overArticles: any[] = [];\n\n      index.openCursor(IDBKeyRange.only([server, group])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if(cursor) {\n          const overArticle = {\n            articleNumber: cursor.value.articleNumber,\n            headers: JSON.parse(cursor.value.headers),\n            metadata:  JSON.parse(cursor.value.metadata),\n          };\n          overArticles.push(overArticle);\n          cursor.continue();\n        } else {\n          resolve(overArticles);\n        }\n      };\n    }));\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistBody(server: string, article: any) {\n    let transaction = this.db.transaction([\"body\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"body\");\n    const storageObj = {\n      id: article.messageId,\n      server: server,\n      body: JSON.stringify(article.body),\n    };\n    objectStore.add(storageObj);\n  }\n\n  public async retrieveBody(server: string, id: string): Promise<Article> {\n    return new Promise((resolve, reject) => {\n      let transaction = this.db.transaction('body');\n      let objectStore = transaction.objectStore('body');\n      let index = objectStore.index(\"server-id\");\n      index.openCursor(IDBKeyRange.only([server, id])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const body = {\n          messageId: cursor.value.id,\n          body: JSON.parse(cursor.value.body),\n        };\n        resolve(body);\n      }\n    });\n  }\n}\n","import moment, {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport parse from \"emailjs-mime-parser\";\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\nimport {Group} from \"../group/Group\";\nimport {GroupCache} from \"../group/GroupCache\";\nimport {Attachment} from \"./Attachment\";\nimport {mimeWordsDecode} from \"emailjs-mime-codec\";\nimport {Article as NewsieArticle} from \"newsie\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[],\n  number: number,\n\n  contents(): Promise<{text: Content[], attachments: Attachment[]}>,\n}\n\nexport class Article implements ArticleInterface {\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n  public readonly id: ArticleId;\n  public readonly number: number;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private group: Group;\n  private readonly newsieClient: Newsie;\n\n  constructor(id: string, number: number, subject: string, date: Moment, author: Author, group: Group, newsieClient: Newsie) {\n    this.id = id;\n    this.number = number;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.group = group;\n    this.newsieClient = newsieClient;\n  }\n\n  public static ArticleFromNewsieArticle(a: NewsieArticle, group: Group, newsieClient: Newsie): Article | null {\n    if (!a || !a.headers || !a.articleNumber) {\n      return null;\n    }\n    const date = moment(a.headers.DATE);\n    const author = Author.authorFromString(mimeWordsDecode(a.headers.FROM));\n    const article = new Article(a.headers['MESSAGE-ID'], a.articleNumber, mimeWordsDecode(a.headers.SUBJECT), date,\n      author, group, newsieClient);\n    article.setReferences(a.headers.REFERENCES);\n    return article;\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if (contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if (firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while ((nextRootIndex < contents.length && contents[nextRootIndex].citationLevel !== 0) ||\n      contents[nextRootIndex].text.length === 0) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number | null = null;\n    for (let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if (content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if (content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if (citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  private static bodyToContents(body: string[]): {text: Content[], attachments: Attachment[]} {\n    const contents: Content[] = [];\n    let attachments: Attachment[] = [];\n\n    if (body[0] === 'This is a multi-part message in MIME format.') {\n      const missingMimeHeader =\n        'MIME-Version: 1.0\\n' +\n        `Content-Type: multipart/mixed; boundary=${body[1].substring(2)}\\n` +\n        '\\n';\n      const mimeInfo = parse(missingMimeHeader + body.join('\\n'));\n      body = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value === 'text/plain')\n        .map((node: any) => new TextDecoder(\"utf-8\").decode(node.content))\n        .join('\\n')\n        .split('\\n');\n      attachments = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value !== 'text/plain')\n        .map((node: any) => {\n          const base64 = node.raw.substring(node.raw.lastIndexOf('\\n\\n')).replace(/\\s/g, \"\");\n          return {\n            contentType: node.contentType.value,\n            name: node.contentType.params.name,\n            dataUrl: `data:${node.contentType.value};base64,${base64}`\n          };\n        });\n    }\n\n    if (!body) {\n      return {text: contents, attachments};\n    }\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return {text: contents, attachments};\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  public async contents(): Promise<{text: Content[], attachments: Attachment[]}> {\n    const groupCache = await GroupCache.instance();\n    let article = await groupCache.retrieveBody(this.group.host, this.id);\n    if (!article || !article.body) {\n      article = (await this.newsieClient.body(this.id)).article;\n      if (article.body) {\n        await groupCache.persistBody(this.group.host, article);\n      } else {\n        article.body = [\n          '[newsR: content not found and not cached]'\n        ]\n      }\n    }\n    const contents = Article.bodyToContents(article.body);\n    Article.stripStartEndCitationsFromContents(contents.text);\n    return {text: contents.text, attachments: contents.attachments};\n  }\n\n  public async postFollowup(author: Author, subject: string, body: string[]): Promise<void> {\n    await this.group.post(author, subject, body, this.references.concat(this.id));\n  }\n}\n","import Newsie from 'newsie';\nimport {Article as NewsieArticle} from \"newsie\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\nimport {GroupCache} from \"./GroupCache\";\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  public readonly host: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, host: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n    this.host = host;\n  }\n\n  public async article(articleNumber: number): Promise<Article|null> {\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${articleNumber}-${articleNumber}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const a: NewsieArticle = overview.articles[0];\n    return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const articles = await groupCache.retrieveOverArticles(this.host, this.name);\n    const articlesByNumber: any[] = articles\n      .sort((a: any, b: any) => a.articleNumber - b.articleNumber)\n      .map((a: any) => {\n        return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n\n  public async post(author: Author, subject: string, body: string[], references?: string[]): Promise<void> {\n    const initialResponse = await this.newsieClient.post();\n    if (initialResponse.code !== 340) {\n      // todo: display error..\n      const errorMsg = \"Cannot post: Posting not permitted\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    const article: NewsieArticle = {\n      headers: {\n        From: author.toString(),\n        Newsgroups: this.name,\n        Subject: subject,\n      },\n      body: body\n    };\n    if (references && article.headers) {\n      article.headers.References = references.join(' ');\n    }\n\n    const postResponse = await initialResponse.send(article);\n    if (postResponse.code !== 240) {\n      // todo: display error..\n      const errorMsg = \"Posting failed: Posting failed\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions)\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  private static keepaliveIntervalMs: 10000;\n  private static keepaliveIntervalReference: NodeJS.Timeout | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private readonly newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = Server.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      const nntpUrl = process.env.REACT_APP_NNTP_URL;\n      const nntpPortStr = process.env.REACT_APP_NNTP_PORT;\n      if (!nntpUrl || !nntpPortStr) {\n        throw new Error('Environment variable: REACT_APP_NNTP_URL or REACT_APP_NNTP_PORT not specified.');\n      }\n      this.server = new Server(nntpUrl, parseInt(nntpPortStr));\n      const webSocket = await this.server.connectAndVerifyNewsieClient();\n      this.keepaliveIntervalReference = setInterval( () => webSocket.send(\"Gnackwatschn\"),\n        this.keepaliveIntervalMs);\n    }\n    return this.server;\n  }\n\n  private static initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    return new WsNewsie(newsieOptions);\n  }\n\n  private async connectAndVerifyNewsieClient(): Promise<WebSocket> {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n    return connection.socket;\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const newsgroups = await this.newsieClient.listNewsgroups(process.env.REACT_APP_NNTP_GROUP_PREFIX);\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    });\n  }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {ListType} from \"./List\";\n\nexport function ListEntry<T extends ListType<T>>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n\n  return (\n    <div onClick={() => entry.onPress ? entry.onPress(entry) : undefined}>\n      <div className={\"list-entry\"}>\n        {entry.icon &&\n          <div className=\"float\">\n            <FontAwesomeIcon icon={entry.icon}/>\n          </div>\n        }\n        <Link className=\"no-link\" to={entry.url}>\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </Link>\n      </div>\n    </div>\n\n  )\n}\n","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nexport type ListType<T> = {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  icon?: IconProp\n  onPress?: (entry: T) => void\n};\n\nexport function List<T extends ListType<T>>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function unsubscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.filter(g => g !== group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport logo from \"../logo.svg\";\nimport {IconButton} from \"./IconButton\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\n\nexport type Button = {\n  name: string\n  icon: IconProp\n  url?: string\n  onPress?(): void\n}\n\nexport function Header(props: {\n  name: string\n  url?: string\n  searchBar?: {\n    filter: (value: string) => void\n  }\n  buttons?: Button[]\n}) {\n  const {searchBar} = props;\n  return (\n    <div className=\"app-grid-header\">\n      <Logo/>\n      <div className=\"search-bar\">\n        <Heading name={props.name} url={props.url}/>\n        {searchBar && searchBar.filter &&\n        <input className=\"search\" type=\"text\" placeholder=\"Search...\"\n               onChange={(e) => searchBar.filter(e.target.value.toLowerCase())}/>\n        }\n      </div>\n      {props.buttons && props.buttons.map((button, index) =>\n        <Button key={index} icon={button.icon} name={button.name} url={button.url} onPress={button.onPress}/>\n      )}\n\n    </div>\n  )\n}\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <Link className=\"no-link\" to={'/'}>\n        <img src={logo} alt=\"Logo\"/>\n      </Link>\n    </div>\n  )\n}\n\nfunction Heading(props: {\n  url?: string\n  name: string\n}) {\n\n    if (props.url) {\n      return (\n        <Link className=\"no-link\" to={`${props.url}`}>\n          <h2>{props.name}</h2>\n        </Link>\n      )\n    }\n\n  return (\n    <h2>{props.name}</h2>\n  )\n}\n\nfunction Button(props: {\n  icon: IconProp,\n  name: string,\n  url?: string\n  onPress?(): void\n}) {\n  const {icon, name, url, onPress} = props\n  if (url) {\n    return (\n      <Link to={url} className=\"no-link\">\n        <div className=\"icon\">\n          <IconButton icon={icon}>{name}</IconButton>\n        </div>\n      </Link>\n    )\n  }\n\n  if (onPress) {\n    return (\n      <div className=\"icon\" onClick={() => onPress()}>\n        <IconButton icon={icon}>{name}</IconButton>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"icon\">\n      <IconButton icon={icon}>{name}</IconButton>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nexport function Footer() {\n  return (\n    <div className=\"app-grid-footer\">\n      <span className=\"app-name\">newsR</span>\n      <a href=\"https://github.com/Elektropepi/newsR/\" className=\"no-link github-link\">\n        <FontAwesomeIcon icon={['fab', 'github']} />&nbsp;&nbsp;Github\n      </a>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {Server} from \"../server/Server\";\nimport {Link, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  threads: Article[];\n  readArticles: string[];\n  filteredThreads: Article[];\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    threads: [],\n    filteredThreads: [],\n    readArticles: [],\n  };\n\n  async componentDidMount(): Promise<void> {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n\n    this.setState({loading: false, group, threads, readArticles, filteredThreads: threads});\n  }\n\n  render() {\n    const {match} = this.props;\n    const {group, loading, threads, filteredThreads} = this.state;\n\n    const filter = (text: string) => {\n      const filteredThreads = threads.filter(\n        (article) => article.subject.toLowerCase().includes(text) || article.author.name.toLowerCase().includes(text)\n      );\n      this.setState({filteredThreads})\n    };\n\n    const articleListData = group === null\n      ? []\n      : filteredThreads.map(article => ({\n        title: article.subject,\n        subtitle: `${article.author.name} - ${article.date.format('DD.MM.YY HH:mm')}`,\n        url: `${match.url}/${article.number}`,\n        bold: !this.state.readArticles.find(a => a === article.id),\n        onPress: () => {\n          addReadArticle(group.name, article.id);\n          this.setState({readArticles: this.state.readArticles.concat(article.id)})\n        }\n      }));\n\n    const buttons: Button[] = [\n      {\n        name: \"Write\",\n        icon: \"pencil-alt\",\n        url: group === null ? \"\" : `/post/${group.name}`\n      }\n    ];\n\n    const groupName = group === null ? match.params.name : group.name;\n\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - {groupName}</title>\n        </Helmet>\n        <Header name={groupName} searchBar={{filter}} url={match.url} buttons={buttons}/>\n        <div className=\"app-grid-body\">\n          {\n            loading\n              ? <Loading/>\n              : (group === null ? \"Group not found!\" :\n              <Media query={SMALL_SCREEN_QUERY}>\n                {\n                  screenIsSmall => screenIsSmall\n                    ?\n                    <Switch>\n                      <Route path={`${match.path}/:number`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                      || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <List data={articleListData}/>\n                      </Route>\n                    </Switch>\n                    :\n                    <SidebarContent\n                      sidebar={<List data={articleListData}/>}\n                      content={\n                        <Switch>\n                          <Route path={`${match.path}/:number`} render={props =>\n                            <ThreadDetail {...props} group={group}\n                                          article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                          || null}/>\n                          }/>\n                          <NoThread url={match.path} groupName={group.name}/>\n                        </Switch>\n                      }/>\n                }\n              </Media>)\n          }\n        </div>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nfunction NoThread(props: {\n  url: string\n  groupName: string\n}) {\n  return (\n    <Route path={props.url}>\n      <div className=\"no-thread\">\n        <div className=\"no-thread-text\">\n          {\"Welcome to \" + props.groupName}\n        </div>\n        <div className=\"no-thread-text\">\n          Please select a thread or <Link to={`/post/${props.groupName}`}>write</Link> a new post!\n        </div>\n      </div>\n    </Route>\n  )\n}\n","import React, {ChangeEvent, FormEvent} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {Author} from \"../author/Author\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Article} from \"../article/Article\";\nimport {Loading} from \"../template/Loading\";\nimport {Helmet} from \"react-helmet\";\nimport {Header} from \"../template/Header\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface State {\n  loading: boolean;\n  sending: boolean;\n  done: boolean;\n  group: Group | null;\n  article: Article | null;\n  author: string,\n  subject: string,\n  content: string\n}\n\nexport interface PostRouteParams {\n  name: string;\n  number: string;\n}\n\nclass _Post extends React.Component<RouteComponentProps<PostRouteParams>, {}> {\n\n  public static replyStr = 'Re: ';\n\n  state: Readonly<State> = {\n    loading: true,\n    sending: false,\n    done: false,\n    group: null,\n    article: null,\n    author: '',\n    subject: '',\n    content: ''\n  };\n\n  async componentDidMount(): Promise<void> {\n    const {match} = this.props;\n    const server = await Server.instance();\n    const group = await server.getGroupByName(match.params.name);\n    this.setState({\n      author: localStorage.getItem('author')\n    });\n    if (!group) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    if (!match.params.number) {\n      this.setState({\n        group,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const article = await group.article(parseInt(match.params.number));\n    if (!article) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const subject = article.subject.startsWith(_Post.replyStr) ? article.subject : _Post.replyStr + article.subject;\n    this.setState({\n      group,\n      article,\n      subject,\n      loading: false\n    });\n  }\n\n  async send(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState({\n      sending: true\n    });\n    const {group, article, subject, author, content} = this.state;\n    if (!group) {\n      console.error('Error: cannot send, group not found.');\n      return;\n    }\n    const authorClass = Author.authorFromString(author);\n    console.log('author', author, authorClass);\n    console.log('subject', subject);\n    console.log('content', content);\n\n    localStorage.setItem('author', author);\n    if (article) {\n      await article.postFollowup(authorClass, subject, [content]);\n    } else {\n      await group?.post(authorClass, subject, [content]);\n    }\n    this.setState({\n      sending: false,\n      done: true\n    });\n  }\n\n  render() {\n    const {match} = this.props;\n    const {group, article, loading, subject, author, content, sending, done} = this.state;\n\n    let headerText = group === null ? match.params.name : group.name;\n    if (article) {\n      headerText += ` ${article.number} follow up`\n    }\n    // todo: insert article content as quote..\n    // todo: form validation, author\n    // todo: fix reload bug\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - headerText</title>\n        </Helmet>\n        <Header name={headerText} url={match.url}/>\n        <div className=\"app-grid-body\">\n          {\n            loading ? <Loading/> : (group === null ? \"Group not found\" :\n              <form className=\"post-article\" onSubmit={(event: FormEvent<HTMLFormElement>) => this.send(event)}>\n                <div className=\"input-group\">\n                  <input\n                    name=\"author\"\n                    type=\"text\"\n                    placeholder=\"Name <mail@provider.tld>\"\n                    value={author}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        author: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    name=\"subject\"\n                    type=\"text\"\n                    placeholder=\"Subject: …\"\n                    value={subject}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        subject: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input name=\"group\" type=\"text\" value={group.name} readOnly tabIndex={-1}/>\n                </div>\n                {article && (\n                  <div className=\"input-group\">\n                    <input\n                      name=\"followup to\"\n                      type=\"hidden\"\n                      value={article?.references.concat(article.id).join(' ')}\n                      readOnly\n                    />\n                  </div>\n                )}\n                <div className=\"input-group\">\n              <textarea\n                value={content}\n                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                  this.setState({\n                    content: event.currentTarget.value\n                  })\n                }}\n              />\n                </div>\n                <div className=\"input-group\">\n                  <button className=\"submit\" type=\"submit\" disabled={sending || done}>\n                    {\n                      sending ? <FontAwesomeIcon icon=\"spinner\" spin />\n                      : (done ? \"Sent!\" : \"Post\")\n                    }\n                  </button>\n                  <button className=\"back\" type=\"reset\" onClick={() => this.props.history.goBack()}>Go back</button>\n                </div>\n              </form>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Post = withRouter(_Post);\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\"\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {getSubscribedGroups, subscribeGroup, unsubscribeGroup} from \"../localStorage/localStorage\";\nimport {Link, Route, Switch} from \"react-router-dom\";\n\ninterface StartPageState {\n  groups: Group[],\n  filterText: string,\n  subscribedGroupsName: string[]\n}\n\nexport function StartPage() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filterText: \"\",\n    subscribedGroupsName: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      const subscribedGroupsName = getSubscribedGroups();\n      setState({\n        ...state,\n        groups,\n        subscribedGroupsName\n      });\n\n      setLoading(false)\n    }\n\n    fetchData();\n  },\n    // doesn't work with [state]? \n    // eslint-disable-next-line\n    []);\n\n  const filter = (filterText: string) => {\n    setState({...state, filterText})\n  };\n\n  const changeSubscriptionState = (group: { title: string }) => {\n    if (isGroupSubscribed(group.title)) {\n      unsubscribeGroup(group.title);\n    } else {\n      subscribeGroup(group.title);\n    }\n    const subscribedGroupsName = getSubscribedGroups();\n    setState({...state, subscribedGroupsName})\n  };\n\n  const groupIcon = (group: Group): IconProp => {\n    if (isGroupSubscribed(group.name))\n      return \"minus-square\" as IconProp;\n\n    return \"plus-square\" as IconProp\n  };\n\n  const manageButton: Button = {\n    name: \"Manage groups\",\n    icon: \"cog\",\n    url: \"/groups-manage\"\n  };\n\n  const subscriptionButton: Button = {\n    name: \"Subscriptions\",\n    icon: \"home\",\n    url: \"/\"\n  };\n\n  const allGroupsButton: Button = {\n    name: \"All Groups\",\n    icon: \"list\",\n    url: \"/groups\"\n  };\n\n  const groupButtons: Button[] = [manageButton, subscriptionButton];\n\n  const subscriptionButtons: Button[] = [manageButton, allGroupsButton];\n\n  const manageButtons: Button[] = [allGroupsButton, subscriptionButton];\n\n  const isGroupFiltered = (group: Group) => {\n    const {filterText} = state;\n    if (filterText === \"\") {\n      return true;\n    }\n    return (group.name.toLowerCase().includes(filterText) || group.description.toLowerCase().includes(filterText));\n  };\n\n  const isGroupSubscribed = (groupName: string) => {\n    return state.subscribedGroupsName.includes(groupName);\n  };\n\n  const getGroups = (isSubscription?: boolean): Group[] => {\n    return state.groups.filter(group => isGroupFiltered(group) && (isSubscription !== true || isGroupSubscribed(group.name)));\n  };\n\n  const nntpUrl = process.env.REACT_APP_NNTP_URL ? process.env.REACT_APP_NNTP_URL : '';\n  return (\n    <div className=\"app-grid\">\n      <Helmet>\n        <title>newsR - {nntpUrl}</title>\n      </Helmet>\n      <Switch>\n        <Route path=\"/groups\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={groupButtons}/>\n        </Route>\n        <Route path=\"/groups-manage\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={manageButtons}/>\n        </Route>\n        <Route path=\"/\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={subscriptionButtons}/>\n        </Route>\n      </Switch>\n      <div className=\"app-grid-body\">\n        {\n          loading ? <Loading/> :\n            <Switch>\n              <Route path=\"/groups\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: `/groups/${group.name}`\n                }))}/>\n              </Route>\n              <Route path=\"/groups-manage\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: \"\",\n                  onPress: changeSubscriptionState,\n                  icon: groupIcon(group)\n                }))}/>\n              </Route>\n              <Route path=\"/\">\n                {state.subscribedGroupsName.length === 0\n                  ? <div className=\"no-thread\">\n                    <div className=\"no-thread-text\">\n                      Welcome to newsR - <Link to={`/groups-manage`}>Subscribe to a newsgroup</Link> to get started!\n                    </div>\n                  </div>\n                  : <List data={getGroups(true).map((group) => ({\n                    title: group.name,\n                    subtitle: group.description,\n                    url: `/groups/${group.name}`\n                  }))}/>}\n              </Route>\n            </Switch>\n        }\n      </div>\n      <Footer/>\n    </div>\n  )\n}\n\n\n\n\n","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Post} from \"./post/Post\";\nimport {StartPage} from \"./startPage/StartPage\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/post/:name/:number?\" component={Post}/>\n          <Route path=\"/\" component={StartPage}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    // websocke interception not possible with serviceWorker: https://stackoverflow.com/a/39602235/2306363\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {\n  faChevronDown,\n  faChevronRight,\n  faCog,\n  faHandPointRight,\n  faHome,\n  faList,\n  faMinusSquare,\n  faPencilAlt,\n  faPlusSquare,\n  faReply,\n  faSpinner\n} from '@fortawesome/free-solid-svg-icons'\nimport {faGithub} from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(faChevronDown, faChevronRight, faHandPointRight, faHome, faReply, faSpinner, faPencilAlt, faCog, faMinusSquare,\n  faPlusSquare, faList, faGithub);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8e7cbbb2.svg\";"],"sourceRoot":""}