{"version":3,"sources":["template/Loading.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","group/GroupTitle.tsx","template/AppGrid.tsx","author/Author.ts","article/Content.ts","article/Article.ts","group/Group.ts","server/Server.ts","template/ListEntry.tsx","template/List.tsx","localStorage/localStorage.ts","group/GroupDetail.tsx","template/Constants.ts","startPage/StartPage.tsx","startPage/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","icon","spin","React","Component","ArticleDetail","state","isContentLoading","contents","this","loadContent","prevProps","props","article","showContent","setState","level","text","nestContent","onClickHeader","onClick","id","subject","date","format","author","name","href","email","map","content","index","key","citationLevel","defaultProps","CollapsibleThreadListEntry","articles","followUps","CollapsibleThreadList","forceShowIds","articleId","includes","splice","indexOf","push","handleArticleClick","ThreadDetail","Helmet","SidebarContent","sidebar","GroupTitle","group","url","to","AppGrid","header","body","footer","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","Article","newsieClient","references","directReference","length","split","bodyToContents","stripStartEndCitationsFromContents","whitespaceRegex","nextRootIndex","citationIndex","i","isOnlyWhitespace","forEach","line","substring","Group","description","number","over","low","high","overview","articlesByNumber","a","moment","headers","DATE","authorFromString","FROM","SUBJECT","setReferences","REFERENCES","articleIdMap","threads","sort","b","unix","WsConnection","host","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","connect","async","Promise","resolve","addEventListener","write","_addSocketHandlers","disconnect","close","h","reject","Error","str","send","addCallback","callback","onmessage","event","responseHandler","response","data","shift","onerror","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","JSON","parse","then","code","Newsie","Server","initWsNewsieClient","capabilities","LIST","listNewsgroups","newsgroups","ng","server","connectAndVerifyNewsieClient","newsieOptions","isNaN","ListEntry","entry","onPress","bold","title","subtitle","List","getReadArticles","readArticles","localStorage","getItem","GroupDetail","loading","instance","getGroupByName","match","params","articleListData","setItem","stringify","concat","addReadArticle","size","query","screenIsSmall","path","render","thread","StartPage","useState","groups","filteredGroups","setLoading","useEffect","fetchData","type","placeholder","onChange","e","filter","toLowerCase","target","value","Root","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","library","add","faSpinner","faHome","ReactDOM","basename","document","getElementById","URL","origin","fetch","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c010657.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading\">\n        <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n      </div>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\n\ninterface Props {\n  article: ArticleInterface,\n  showContent: boolean,\n  onClickHeader: ((id: ArticleId) => void) | null\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null\n};\n\ninterface State {\n  contents: Content[],\n  isContentLoading: boolean\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  render() {\n    const {article, showContent, onClickHeader} = this.props;\n    const {contents, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          <h1 className=\"article-detail-title\">{article.subject}</h1>\n          <p className=\"article-detail-author\">\n            {article.date.format(\"DD.MM.YYYY\")} by {article.author.name} (<a href={`mailto:${article.author.email}`}>{article.author.email}</a>)\n          </p>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick} = this.props;\n\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} showContent={showContent} onClickHeader={id => onClick(id)}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps}/>\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)}/>\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceShowIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceShowIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceShowIds} = this.state;\n    if (forceShowIds.includes(articleId)) {\n      forceShowIds.splice(forceShowIds.indexOf(articleId), 1)\n    } else {\n      forceShowIds.push(articleId);\n    }\n    this.setState({forceShowIds: forceShowIds});\n  }\n\n  render() {\n    const {articles} = this.props;\n    const {forceShowIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry key={article.id} article={article}\n                                        showContent={forceShowIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article, ArticleId} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  id: ArticleId;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail article={article} showContent={true}/>\n        <CollapsibleThreadList articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content\">{this.props.content}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {Link} from \"react-router-dom\";\n\ninterface Props {\n  group: Group;\n  url: string;\n}\n\nexport class GroupTitle extends React.Component<Props, any> {\n\n  render() {\n    const {group, url} = this.props;\n    return (\n      <div className=\"group-title\">\n        <Link className=\"no-link\" to={`${url}`}>{group.name}</Link>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  header: ReactNode,\n  body: ReactNode,\n  footer: ReactNode\n}\n\ninterface State {\n}\n\nexport class AppGrid extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"app-grid\">\n        <div className=\"app-grid-header\">{this.props.header}</div>\n        <div className=\"app-grid-body\">{this.props.body}</div>\n        <div className=\"app-grid-footer\">{this.props.footer}</div>\n      </div>\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[]\n\n  contents(): Promise<Content[]>,\n}\n\nexport class Article implements ArticleInterface {\n  public readonly id: ArticleId;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private readonly newsieClient: Newsie;\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n\n  constructor(id: string, subject: string, date: Moment, author: Author, newsieClient: Newsie) {\n    this.id = id;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.newsieClient = newsieClient;\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if(contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if(firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while(nextRootIndex < contents.length && contents[nextRootIndex].citationLevel !== 0) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number|null = null;\n    for(let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if(content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if(content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if(citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static bodyToContents(body: string[]): Content[] {\n    const contents: Content[] = [];\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return contents;\n  }\n\n  public async contents(): Promise<Content[]> {\n    const article = await this.newsieClient.body(this.id);\n    if (!article.article.body) {\n      return [];\n    }\n    const contents = Article.bodyToContents(article.article.body);\n    Article.stripStartEndCitationsFromContents(contents);\n    return contents;\n  }\n}\n","import Newsie from 'newsie';\nimport moment from \"moment\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const articlesByNumber: Article[] = overview.articles\n      .map((a: any) => {\n        const date = moment(a.headers.DATE);\n        const author = Author.authorFromString(a.headers.FROM);\n        const article = new Article(a.headers['MESSAGE-ID'], a.headers.SUBJECT, date, author, this.newsieClient);\n        article.setReferences(a.headers.REFERENCES);\n        return article;\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions)\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private readonly newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = Server.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      this.server = new Server('news.tugraz.at', 119);\n      await this.server.connectAndVerifyNewsieClient();\n    }\n    return this.server;\n  }\n\n  private static initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    return new WsNewsie(newsieOptions);\n  }\n\n  public async connectAndVerifyNewsieClient() {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const newsgroups = await this.newsieClient.listNewsgroups('tu-graz*');\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.newsieClient);\n    });\n  }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport function ListEntry<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n\n  return (\n    <div onClick={() => entry.onPress ? entry.onPress() : undefined}>\n      <p className={\"list-entry\"}>\n        <Link className=\"no-link\" to={entry.url}>\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </Link>\n      </p>\n    </div>\n\n  )\n}","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\n\nexport function List<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {GroupTitle} from \"./GroupTitle\";\nimport {AppGrid} from \"../template/AppGrid\";\nimport {Server} from \"../server/Server\";\nimport {Link, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  threads: Article[];\n  readArticles: string[];\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    threads: [],\n    readArticles: []\n  };\n\n  async componentDidMount(): Promise<void> {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n    this.setState({loading: false, group, threads, readArticles});\n  }\n\n  render() {\n    const {match} = this.props;\n    const {loading, group, threads} = this.state;\n\n    if (loading) {\n      return (<Loading/>);\n    }\n\n    if (group === null) {\n      return \"Group not found!\";\n    }\n\n    const articleListData = threads.map(article => ({\n      title: article.subject,\n      subtitle: `${article.author.name} - ${article.date.format('DD.MM.YY')}`,\n      url: `${match.url}/${article.id}`,\n      bold: !this.state.readArticles.find(a => a === article.id),\n      onPress: () => {\n        addReadArticle(group.name, article.id);\n        this.setState({...this.state, readArticles: this.state.readArticles.concat(article.id)})\n      }\n    }));\n\n    return (\n      <div className=\"group-detail\">\n        <Helmet>\n          <title>newsR - {group?.name}</title>\n        </Helmet>\n        <AppGrid\n          header={\n            <div className=\"float-div\">\n              <div className=\"float\">\n                <Link className=\"no-link\" to={'/'}>\n                  <FontAwesomeIcon icon=\"home\" size=\"xs\"/>\n                </Link>\n              </div>\n\n              <GroupTitle group={group} url={match.url}/>\n            </div>\n          }\n          body={<Media query={SMALL_SCREEN_QUERY}>\n            {\n              screenIsSmall => screenIsSmall\n                ?\n                <Switch>\n                  <Route path={`${match.path}/:id`} render={props =>\n                    <ThreadDetail {...props} group={group}\n                                  article={threads.find(thread => thread.id === props.match.params.id) || null}/>\n                  }/>\n                  <Route path={`${match.path}`}>\n                    <List data={articleListData}/>\n                  </Route>\n                </Switch>\n                :\n                <SidebarContent\n                  sidebar={<List data={articleListData}/>}\n                  content={\n                    <Switch>\n                      <Route path={`${match.path}/:id`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.id === props.match.params.id) || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <h3>Please select a thread</h3>\n                      </Route>\n                    </Switch>\n                  }/>\n            }\n          </Media>\n          }\n          footer={<div></div>}/>\n      </div>\n    )\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 45rem)\";\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport { Helmet } from \"react-helmet\"\n\ninterface StartPageState {\n  groups: Group[]\n  filteredGroups: Group[]\n}\n\nexport function StartPage() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filteredGroups: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      setState({groups, filteredGroups: groups})\n\n      setLoading(false)\n    }\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <Loading/>;\n  }\n\n  const filter = (text: string) => {\n    const filteredGroups = state.groups.filter(\n      (group) => group.name.toLowerCase().includes(text)\n    )\n    setState({...state, filteredGroups})\n  }\n\n  return (\n    <div>\n      <Helmet>\n        <title>newsR - news.tugraz.at</title>\n      </Helmet>\n      <div className=\"header\">\n        <h1>Welcome to news.tugraz.at</h1>\n        <input className=\"search\" type=\"text\" placeholder=\"Search...\" onChange={(e) => filter(e.target.value.toLowerCase())}/>\n      </div>\n      <List data={state.filteredGroups.map((group) => ({\n        title: group.name,\n        subtitle: group.description,\n        url: `/groups/${group.name}`\n      }))}/>\n    </div>\n  )\n}\n\n\n\n\n","import React from \"react\";\nimport {StartPage} from \"./StartPage\";\n\nexport class Root extends React.Component<{}, {}> {\n  render() {\n    return <StartPage/>\n  }\n}","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Root} from \"./startPage/Root\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/\" component={Root}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {faHome, faSpinner} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSpinner);\nlibrary.add(faHome);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}