{"version":3,"sources":["template/Loading.tsx","article/ArticleAuthor.tsx","template/IconButton.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","group/GroupTitle.tsx","template/AppGrid.tsx","author/Author.ts","article/Content.ts","group/GroupCache.ts","article/Article.ts","group/Group.ts","server/Server.ts","template/ListEntry.tsx","template/List.tsx","localStorage/localStorage.ts","group/GroupDetail.tsx","template/Constants.ts","startPage/StartPage.tsx","startPage/Root.tsx","post/Post.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","icon","spin","React","Component","ArticleAuthor","article","this","props","date","format","author","name","href","email","IconButton","children","ArticleDetail","state","isContentLoading","contents","attachments","loadContent","prevProps","showContent","setState","text","level","nestContent","onClickHeader","hasSimpleHeader","baseUrl","onClick","id","subject","to","number","map","content","index","key","citationLevel","length","attachment","dataUrl","download","includes","contentType","src","style","width","alt","defaultProps","CollapsibleThreadListEntry","articles","followUps","CollapsibleThreadList","forceHideIds","articleId","splice","indexOf","push","handleArticleClick","ThreadDetail","match","params","Helmet","SidebarContent","sidebar","GroupTitle","group","url","AppGrid","header","body","footer","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","GroupCache","db","cache","Promise","resolve","reject","openRequest","indexedDB","open","onerror","onsuccess","event","result","onupgradeneeded","upgrade","target","overStore","createObjectStore","keyPath","createIndex","unique","bodyStore","server","overArticle","transaction","objectStore","storageObj","headers","articleNumber","JSON","stringify","metadata","add","overviewArticles","forEach","persistOverArticle","overArticles","openCursor","IDBKeyRange","only","cursor","value","parse","continue","messageId","Article","newsieClient","references","directReference","split","instance","groupCache","retrieveBody","host","persistBody","bodyToContents","stripStartEndCitationsFromContents","post","concat","nextRootIndex","citationIndex","i","isOnlyWhitespace","whitespaceRegex","missingMimeHeader","substring","mimeInfo","join","childNodes","filter","node","TextDecoder","decode","base64","raw","lastIndexOf","replace","line","Group","description","over","low","high","overview","persistOverArticles","retrieveOverArticles","articlesByNumber","sort","a","b","moment","DATE","authorFromString","mimeWordsDecode","FROM","SUBJECT","setReferences","REFERENCES","articleIdMap","threads","unix","initialResponse","code","errorMsg","console","error","Error","From","toString","Newsgroups","Subject","References","send","WsConnection","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","connect","async","addEventListener","write","_addSocketHandlers","disconnect","close","h","str","addCallback","callback","onmessage","responseHandler","response","data","shift","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","then","Newsie","Server","initWsNewsieClient","capabilities","LIST","listNewsgroups","newsgroups","ng","connectAndVerifyNewsieClient","newsieOptions","isNaN","ListEntry","entry","onPress","bold","title","subtitle","List","getReadArticles","readArticles","localStorage","getItem","GroupDetail","loading","getGroupByName","articleListData","setItem","addReadArticle","size","query","screenIsSmall","path","render","thread","parseInt","StartPage","useState","groups","filteredGroups","setLoading","useEffect","fetchData","type","placeholder","onChange","e","toLowerCase","Root","Post","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","library","faSpinner","faHome","faReply","faHandPointRight","faChevronRight","faChevronDown","ReactDOM","basename","document","getElementById","URL","origin","fetch","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a20d50f.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading\">\n        <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n      </div>\n    );\n  }\n}\n","import {ArticleInterface} from \"./Article\";\nimport React from \"react\";\n\ninterface Props {\n  article: ArticleInterface\n}\n\ninterface State {\n}\n\nexport class ArticleAuthor extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n    return (\n      <span className=\"article-detail-author\">\n        {article.date.format(\"DD.MM.YYYY HH:mm\")} by {article.author.name}\n        &nbsp;(<a href={`mailto:${article.author.email}`}>{article.author.email}</a>)\n      </span>\n    );\n  }\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\n\ninterface Props {\n  icon: IconProp\n}\n\ninterface State {\n}\n\nexport class IconButton extends React.Component<Props, State> {\n\n  render() {\n    const {icon, children} = this.props;\n    return (\n      <div className=\"icon-button\">\n        <FontAwesomeIcon icon={icon}/>&nbsp;&nbsp;{children}\n      </div>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\nimport {ArticleAuthor} from \"./ArticleAuthor\";\nimport {IconButton} from \"../template/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {Attachment} from \"./Attachment\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClickHeader: ((id: ArticleId) => void) | null;\n  hasSimpleHeader: boolean;\n  baseUrl: string;\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null,\n  hasSimpleHeader: false\n};\n\ninterface State {\n  contents: Content[];\n  attachments: Attachment[];\n  isContentLoading: boolean;\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: [],\n    attachments: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: [], attachments: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents.text, attachments: contents.attachments});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  render() {\n    const {article, showContent, onClickHeader, hasSimpleHeader, baseUrl} = this.props;\n    const {contents, attachments, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          <div>\n            {hasSimpleHeader\n              ? <div>\n                {\n                  showContent ? <FontAwesomeIcon icon=\"chevron-down\"/> : <FontAwesomeIcon icon=\"chevron-right\"/>\n                }&nbsp;&nbsp;\n                <ArticleAuthor article={article}/>\n              </div>\n\n              : <div>\n                <h1 className=\"article-detail-title\">{article.subject}</h1>\n                <ArticleAuthor article={article}/>\n              </div>\n            }\n          </div>\n          <a href={`mailto:${article.author.email}`} className=\"no-link\">\n            <div className=\"article-button\">\n              <IconButton icon=\"reply\">Reply</IconButton>\n            </div>\n          </a>\n          <Link to={`${baseUrl}${article.number}/post`} className=\"no-link\">\n            <div className=\"article-button\">\n              <IconButton icon=\"hand-point-right\">Follow Up</IconButton>\n            </div>\n          </Link>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n          {attachments.length > 0 &&\n          <div>\n            <p>Attachments:</p>\n            <ul>\n              {attachments.map((attachment) =>\n                <li key={attachment.name}>\n                  <a\n                    href={attachment.dataUrl}\n                    download={attachment.name}\n                  >\n                    {['image/png', 'image/gif', 'image/jpeg', 'image/svg+xml'].includes(attachment.contentType) ? (\n                      <img src={attachment.dataUrl} style={{width: \"100%\"}}  alt={attachment.name} />\n                      ) : (\n                      <span>{attachment.name}</span>\n                      )\n                    }\n                  </a>\n                </li>)}\n            </ul>\n          </div>\n          }\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n  baseUrl: string;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick, baseUrl} = this.props;\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} baseUrl={baseUrl} showContent={showContent} onClickHeader={id => onClick(id)}\n                       hasSimpleHeader={true}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps} baseUrl={baseUrl}/>\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)}/>\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceHideIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n  baseUrl: string;\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceHideIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceHideIds} = this.state;\n    if (forceHideIds.includes(articleId)) {\n      forceHideIds.splice(forceHideIds.indexOf(articleId), 1)\n    } else {\n      forceHideIds.push(articleId);\n    }\n    this.setState({forceHideIds: forceHideIds});\n  }\n\n  render() {\n    const {articles, baseUrl} = this.props;\n    const {forceHideIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry baseUrl={baseUrl} key={article.id} article={article}\n                                        showContent={!forceHideIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  number: string;\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article, match} = this.props;\n    const baseUrl = `/groups/${match.params.name}/`;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail baseUrl={baseUrl} article={article} showContent={true}/>\n        <CollapsibleThreadList baseUrl={baseUrl} articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content\">{this.props.content}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {Link} from \"react-router-dom\";\n\ninterface Props {\n  group: Group;\n  url: string;\n}\n\nexport class GroupTitle extends React.Component<Props, any> {\n\n  render() {\n    const {group, url} = this.props;\n    return (\n      <div className=\"group-title\">\n        <Link className=\"no-link\" to={`${url}`}>{group.name}</Link>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  header: ReactNode,\n  body: ReactNode,\n  footer: ReactNode\n}\n\ninterface State {\n}\n\nexport class AppGrid extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"app-grid\">\n        <div className=\"app-grid-header\">{this.props.header}</div>\n        <div className=\"app-grid-body\">{this.props.body}</div>\n        <div className=\"app-grid-footer\">{this.props.footer}</div>\n      </div>\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n\n  public toString(): string {\n    return `${this.name} <${this.email}>`;\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Article} from \"newsie\";\n\nexport class GroupCache {\n\n  private static cache: GroupCache;\n\n  private db: any;\n\n  public static async instance(): Promise<GroupCache> {\n    if (this.cache) {\n      return GroupCache.cache;\n    }\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open(\"newsR\");\n\n      openRequest.onerror = () => {\n        reject();\n      };\n      openRequest.onsuccess = (event) => {\n        this.cache = new GroupCache(openRequest.result);\n        resolve(this.cache);\n      };\n      openRequest.onupgradeneeded = GroupCache.upgrade;\n    })\n  }\n\n  // todo: event type\n  private static upgrade(event: any) {\n    const db = event.target.result;\n\n    let overStore = db.createObjectStore(\"over\", { keyPath: \"id\" });\n    overStore.createIndex(\"server-group\", [\"server\", \"group\"], {unique:false});\n    overStore.createIndex(\"server\", \"server\", { unique: false });\n    overStore.createIndex(\"group\", \"group\", { unique: false });\n    overStore.createIndex(\"articleNumber\", \"articleNumber\", { unique: false });\n    overStore.createIndex(\"headers\", \"headers\", { unique: false });\n    overStore.createIndex(\"metadata\", \"metadata\", { unique: false });\n\n    let bodyStore = db.createObjectStore(\"body\", { keyPath: \"id\" });\n    bodyStore.createIndex(\"server-id\", [\"server\", \"id\"], {unique:false});\n    bodyStore.createIndex(\"server\", \"server\", { unique: false });\n    bodyStore.createIndex(\"body\", \"articleNumber\", { unique: false });\n  }\n\n  constructor(db: any) {\n    this.db = db;\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistOverArticle(server: string, group: string, overArticle: any) {\n    let transaction = this.db.transaction([\"over\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"over\");\n    const storageObj = {\n      id: overArticle.headers[\"MESSAGE-ID\"],\n      \"server-group\": [server, group],\n      server: server,\n      group: group,\n      articleNumber: overArticle.articleNumber,\n      headers: JSON.stringify(overArticle.headers),\n      metadata: JSON.stringify(overArticle.metadata)\n    };\n    objectStore.add(storageObj);\n  }\n\n  // todo: fix overview type\n  public async persistOverArticles(server: string, group: string, overviewArticles: any[]) {\n    overviewArticles.forEach((overArticle: any) => this.persistOverArticle(server, group, overArticle));\n  }\n\n  public async retrieveOverArticles(server: string, group: string): Promise<any[]> {\n    return new Promise((resolve => {\n      let transaction = this.db.transaction('over');\n      let objectStore = transaction.objectStore('over');\n      let index = objectStore.index(\"server-group\");\n      const overArticles: any[] = [];\n\n      index.openCursor(IDBKeyRange.only([server, group])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if(cursor) {\n          const overArticle = {\n            articleNumber: cursor.value.articleNumber,\n            headers: JSON.parse(cursor.value.headers),\n            metadata:  JSON.parse(cursor.value.metadata),\n          };\n          overArticles.push(overArticle);\n          cursor.continue();\n        } else {\n          resolve(overArticles);\n        }\n      };\n    }));\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistBody(server: string, article: any) {\n    let transaction = this.db.transaction([\"body\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"body\");\n    const storageObj = {\n      id: article.messageId,\n      server: server,\n      body: JSON.stringify(article.body),\n    };\n    objectStore.add(storageObj);\n  }\n\n  public async retrieveBody(server: string, id: string): Promise<Article> {\n    return new Promise((resolve, reject) => {\n      let transaction = this.db.transaction('body');\n      let objectStore = transaction.objectStore('body');\n      let index = objectStore.index(\"server-id\");\n      index.openCursor(IDBKeyRange.only([server, id])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const body = {\n          messageId: cursor.value.id,\n          body: JSON.parse(cursor.value.body),\n        };\n        resolve(body);\n      }\n    });\n  }\n}\n","import {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport parse from \"emailjs-mime-parser\";\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\nimport {Group} from \"../group/Group\";\nimport {GroupCache} from \"../group/GroupCache\";\nimport {Attachment} from \"./Attachment\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[],\n  number: number,\n\n  contents(): Promise<{text: Content[], attachments: Attachment[]}>,\n}\n\nexport class Article implements ArticleInterface {\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n  public readonly id: ArticleId;\n  public readonly number: number;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private group: Group;\n  private readonly newsieClient: Newsie;\n\n  constructor(id: string, number: number, subject: string, date: Moment, author: Author, group: Group, newsieClient: Newsie) {\n    this.id = id;\n    this.number = number;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.group = group;\n    this.newsieClient = newsieClient;\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if (contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if (firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while ((nextRootIndex < contents.length && contents[nextRootIndex].citationLevel !== 0) ||\n      contents[nextRootIndex].text.length === 0) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number | null = null;\n    for (let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if (content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if (content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if (citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  private static bodyToContents(body: string[]): {text: Content[], attachments: Attachment[]} {\n    const contents: Content[] = [];\n    let attachments: Attachment[] = [];\n\n    if (body[0] === 'This is a multi-part message in MIME format.') {\n      const missingMimeHeader =\n        'MIME-Version: 1.0\\n' +\n        `Content-Type: multipart/mixed; boundary=${body[1].substring(2)}\\n` +\n        '\\n';\n      const mimeInfo = parse(missingMimeHeader + body.join('\\n'));\n      body = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value === 'text/plain')\n        .map((node: any) => new TextDecoder(\"utf-8\").decode(node.content))\n        .join('\\n')\n        .split('\\n');\n      attachments = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value !== 'text/plain')\n        .map((node: any) => {\n          const base64 = node.raw.substring(node.raw.lastIndexOf('\\n\\n')).replace(/\\s/g, \"\");\n          return {\n            contentType: node.contentType.value,\n            name: node.contentType.params.name,\n            dataUrl: `data:${node.contentType.value};base64,${base64}`\n          };\n        });\n    }\n\n    if (!body) {\n      return {text: contents, attachments};\n    }\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return {text: contents, attachments};\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  public async contents(): Promise<{text: Content[], attachments: Attachment[]}> {\n    const groupCache = await GroupCache.instance();\n    let article = await groupCache.retrieveBody(this.group.host, this.id);\n    if (!article || !article.body) {\n      article = (await this.newsieClient.body(this.id)).article;\n      if (article.body) {\n        await groupCache.persistBody(this.group.host, article);\n      } else {\n        article.body = [\n          '[newsR: content not found and not cached]'\n        ]\n      }\n    }\n    const contents = Article.bodyToContents(article.body);\n    Article.stripStartEndCitationsFromContents(contents.text);\n    return {text: contents.text, attachments: contents.attachments};\n  }\n\n  public async postFollowup(author: Author, subject: string, body: string[]): Promise<void> {\n    await this.group.post(author, subject, body, this.references.concat(this.id));\n  }\n}\n","import Newsie from 'newsie';\nimport moment from \"moment\";\nimport {Article as NewsieArticle} from \"newsie\";\nimport {mimeWordsDecode} from \"emailjs-mime-codec\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\nimport {GroupCache} from \"./GroupCache\";\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  public readonly host: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, host: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n    this.host = host;\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const articles = await groupCache.retrieveOverArticles(this.host, this.name);\n    const articlesByNumber: Article[] = articles\n      .sort((a: any, b: any) => a.articleNumber - b.articleNumber)\n      .map((a: any) => {\n        const date = moment(a.headers.DATE);\n        const author = Author.authorFromString(mimeWordsDecode(a.headers.FROM));\n        const article = new Article(a.headers['MESSAGE-ID'], a.articleNumber, mimeWordsDecode(a.headers.SUBJECT), date, author, this,\n          this.newsieClient);\n        article.setReferences(a.headers.REFERENCES);\n        return article;\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n\n  public async post(author: Author, subject: string, body: string[], references?: string[]): Promise<void> {\n    const initialResponse = await this.newsieClient.post();\n    if (initialResponse.code !== 340) {\n      // todo: display error..\n      const errorMsg = \"Cannot post: Posting not permitted\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    const article: NewsieArticle = {\n      headers: {\n        From: author.toString(),\n        Newsgroups: this.name,\n        Subject: subject,\n      },\n      body: body\n    };\n    if (references && article.headers) {\n      article.headers.References = references.join(' ');\n    }\n\n    const postResponse = await initialResponse.send(article);\n    if (postResponse.code !== 240) {\n      // todo: display error..\n      const errorMsg = \"Posting failed: Posting failed\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions)\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private readonly newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = Server.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      this.server = new Server('news.tugraz.at', 119);\n      await this.server.connectAndVerifyNewsieClient();\n    }\n    return this.server;\n  }\n\n  private static initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    return new WsNewsie(newsieOptions);\n  }\n\n  public async connectAndVerifyNewsieClient() {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const newsgroups = await this.newsieClient.listNewsgroups('tu-graz*');\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    });\n  }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport function ListEntry<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n\n  return (\n    <div onClick={() => entry.onPress ? entry.onPress() : undefined}>\n      <p className={\"list-entry\"}>\n        <Link className=\"no-link\" to={entry.url}>\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </Link>\n      </p>\n    </div>\n\n  )\n}","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\n\nexport function List<T extends {\n  url: string\n  title: string\n  subtitle?: string\n  bold?: boolean\n  onPress?: () => void\n}>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}","import React from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {GroupTitle} from \"./GroupTitle\";\nimport {AppGrid} from \"../template/AppGrid\";\nimport {Server} from \"../server/Server\";\nimport {Link, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  threads: Article[];\n  readArticles: string[];\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    threads: [],\n    readArticles: []\n  };\n\n  async componentDidMount(): Promise<void> {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n    this.setState({loading: false, group, threads, readArticles});\n  }\n\n  render() {\n    const {match} = this.props;\n    const {loading, group, threads} = this.state;\n\n    if (loading) {\n      return (<Loading/>);\n    }\n\n    if (group === null) {\n      return \"Group not found!\";\n    }\n\n    const articleListData = threads.map(article => ({\n      title: article.subject,\n      subtitle: `${article.author.name} - ${article.date.format('DD.MM.YY HH:mm')}`,\n      url: `${match.url}/${article.number}`,\n      bold: !this.state.readArticles.find(a => a === article.id),\n      onPress: () => {\n        addReadArticle(group.name, article.id);\n        this.setState({...this.state, readArticles: this.state.readArticles.concat(article.id)})\n      }\n    }));\n\n    return (\n      <div className=\"group-detail\">\n        <Helmet>\n          <title>newsR - {group?.name}</title>\n        </Helmet>\n        <AppGrid\n          header={\n            <div className=\"float-div\">\n              <div className=\"float\">\n                <Link className=\"no-link\" to={'/'}>\n                  <FontAwesomeIcon icon=\"home\" size=\"xs\"/>\n                </Link>\n              </div>\n\n              <GroupTitle group={group} url={match.url}/>\n            </div>\n          }\n          body={<Media query={SMALL_SCREEN_QUERY}>\n            {\n              screenIsSmall => screenIsSmall\n                ?\n                <Switch>\n                  <Route path={`${match.path}/:number`} render={props =>\n                    <ThreadDetail {...props} group={group}\n                                  article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                    || null}/>\n                  }/>\n                  <Route path={`${match.path}`}>\n                    <List data={articleListData}/>\n                  </Route>\n                </Switch>\n                :\n                <SidebarContent\n                  sidebar={<List data={articleListData}/>}\n                  content={\n                    <Switch>\n                      <Route path={`${match.path}/:number`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                        || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <h3>Please select a thread or <Link to=\"/post/\">Write</Link></h3>\n                      </Route>\n                    </Switch>\n                  }/>\n            }\n          </Media>\n          }\n          footer={<div></div>}/>\n      </div>\n    )\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 45rem)\";\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport { Helmet } from \"react-helmet\"\n\ninterface StartPageState {\n  groups: Group[]\n  filteredGroups: Group[]\n}\n\nexport function StartPage() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filteredGroups: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      setState({groups, filteredGroups: groups})\n\n      setLoading(false)\n    }\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <Loading/>;\n  }\n\n  const filter = (text: string) => {\n    const filteredGroups = state.groups.filter(\n      (group) => group.name.toLowerCase().includes(text)\n    )\n    setState({...state, filteredGroups})\n  }\n\n  return (\n    <div>\n      <Helmet>\n        <title>newsR - news.tugraz.at</title>\n      </Helmet>\n      <div className=\"header\">\n        <h1>Welcome to news.tugraz.at</h1>\n        <input className=\"search\" type=\"text\" placeholder=\"Search...\" onChange={(e) => filter(e.target.value.toLowerCase())}/>\n      </div>\n      <List data={state.filteredGroups.map((group) => ({\n        title: group.name,\n        subtitle: group.description,\n        url: `/groups/${group.name}`\n      }))}/>\n    </div>\n  )\n}\n\n\n\n\n","import React from \"react\";\nimport {StartPage} from \"./StartPage\";\n\nexport class Root extends React.Component<{}, {}> {\n  render() {\n    return <StartPage/>\n  }\n}","import React from \"react\";\nimport {Server} from \"../server/Server\";\nimport {Author} from \"../author/Author\";\n\nexport class Post extends React.Component<{}, {}> {\n  async send() {\n    const server = await Server.instance();\n    const group = await server.getGroupByName(\"tu-graz.test\");\n    const author = new Author(\"Name\", \"name@provider.tld\");\n    group?.post(author, \"newsR\", [\"test1\"]);\n\n\n    // or\n    //article.postFollowup(author, subject, body);\n  }\n\n  render() {\n    return (\n      <button onClick={() => this.send()}>\n        Send test Post (for real!)\n      </button>\n    );\n  }\n}\n","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Root} from \"./startPage/Root\";\nimport {Post} from \"./post/Post\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/post/\" component={Post}/>\n          <Route path=\"/\" component={Root}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {\n  faChevronDown,\n  faChevronRight,\n  faHandPointRight,\n  faHome,\n  faReply,\n  faSpinner\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSpinner);\nlibrary.add(faHome);\nlibrary.add(faReply);\nlibrary.add(faHandPointRight);\nlibrary.add(faChevronRight);\nlibrary.add(faChevronDown);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}